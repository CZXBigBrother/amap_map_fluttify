//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler2.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapMapFluttifyPlugin (SubHandler2)
- (NSDictionary<NSString*, Handler>*) getSubHandler2 {
    return @{
        @"MAOfflineItem::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOfflineItem::get_adcode");
            }
        
            // ref object
            MAOfflineItem* ref = (MAOfflineItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.adcode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAOfflineItem::get_itemStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOfflineItem::get_itemStatus");
            }
        
            // ref object
            MAOfflineItem* ref = (MAOfflineItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAOfflineItemStatus result = ref.itemStatus;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MATouchPoi::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATouchPoi::get_name");
            }
        
            // ref object
            MATouchPoi* ref = (MATouchPoi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MATouchPoi::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATouchPoi::get_coordinate");
            }
        
            // ref object
            MATouchPoi* ref = (MATouchPoi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.coordinate;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MATouchPoi::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATouchPoi::get_uid");
            }
        
            // ref object
            MATouchPoi* ref = (MATouchPoi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.uid;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAMultiPolyline::get_drawStyleIndexes": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiPolyline::get_drawStyleIndexes");
            }
        
            // ref object
            MAMultiPolyline* ref = (MAMultiPolyline*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<NSNumber*>* result = ref.drawStyleIndexes;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAMultiPointOverlayRenderer::get_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiPointOverlayRenderer::get_icon");
            }
        
            // ref object
            MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIImage* result = ref.icon;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMultiPointOverlayRenderer::get_pointSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiPointOverlayRenderer::get_pointSize");
            }
        
            // ref object
            MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGSize result = ref.pointSize;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMultiPointOverlayRenderer::get_anchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiPointOverlayRenderer::get_anchor");
            }
        
            // ref object
            MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGPoint result = ref.anchor;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMultiPointOverlayRenderer::get_multiPointOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiPointOverlayRenderer::get_multiPointOverlay");
            }
        
            // ref object
            MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAMultiPointOverlay* result = ref.multiPointOverlay;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAIndoorFloorInfo::get_floorName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAIndoorFloorInfo::get_floorName");
            }
        
            // ref object
            MAIndoorFloorInfo* ref = (MAIndoorFloorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.floorName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAIndoorFloorInfo::get_floorIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAIndoorFloorInfo::get_floorIndex");
            }
        
            // ref object
            MAIndoorFloorInfo* ref = (MAIndoorFloorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            int result = ref.floorIndex;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAIndoorFloorInfo::get_floorNona": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAIndoorFloorInfo::get_floorNona");
            }
        
            // ref object
            MAIndoorFloorInfo* ref = (MAIndoorFloorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.floorNona;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAIndoorFloorInfo::get_isPark": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAIndoorFloorInfo::get_isPark");
            }
        
            // ref object
            MAIndoorFloorInfo* ref = (MAIndoorFloorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.isPark;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAIndoorInfo::get_cnName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAIndoorInfo::get_cnName");
            }
        
            // ref object
            MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.cnName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAIndoorInfo::get_enName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAIndoorInfo::get_enName");
            }
        
            // ref object
            MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.enName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAIndoorInfo::get_poiID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAIndoorInfo::get_poiID");
            }
        
            // ref object
            MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.poiID;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAIndoorInfo::get_buildingType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAIndoorInfo::get_buildingType");
            }
        
            // ref object
            MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.buildingType;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAIndoorInfo::get_activeFloorIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAIndoorInfo::get_activeFloorIndex");
            }
        
            // ref object
            MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            int result = ref.activeFloorIndex;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAIndoorInfo::get_activeFloorInfoIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAIndoorInfo::get_activeFloorInfoIndex");
            }
        
            // ref object
            MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            int result = ref.activeFloorInfoIndex;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAIndoorInfo::get_floorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAIndoorInfo::get_floorInfo");
            }
        
            // ref object
            MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray* result = ref.floorInfo;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"MAIndoorInfo::get_numberOfFloor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAIndoorInfo::get_numberOfFloor");
            }
        
            // ref object
            MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            int result = ref.numberOfFloor;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAIndoorInfo::get_numberOfParkFloor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAIndoorInfo::get_numberOfParkFloor");
            }
        
            // ref object
            MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            int result = ref.numberOfParkFloor;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAPolylineRenderer::get_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAPolylineRenderer::get_polyline");
            }
        
            // ref object
            MAPolylineRenderer* ref = (MAPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAPolyline* result = ref.polyline;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAPolylineRenderer::get_is3DArrowLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAPolylineRenderer::get_is3DArrowLine");
            }
        
            // ref object
            MAPolylineRenderer* ref = (MAPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.is3DArrowLine;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAPolylineRenderer::get_sideColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAPolylineRenderer::get_sideColor");
            }
        
            // ref object
            MAPolylineRenderer* ref = (MAPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIColor* result = ref.sideColor;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAShape::get_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAShape::get_title");
            }
        
            // ref object
            MAShape* ref = (MAShape*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.title;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAShape::get_subtitle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAShape::get_subtitle");
            }
        
            // ref object
            MAShape* ref = (MAShape*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.subtitle;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAAnnotationView::get_reuseIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::get_reuseIdentifier");
            }
        
            // ref object
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.reuseIdentifier;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAAnnotationView::get_zIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::get_zIndex");
            }
        
            // ref object
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.zIndex;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAAnnotationView::get_annotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::get_annotation");
            }
        
            // ref object
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            id<MAAnnotation> result = ref.annotation;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAAnnotationView::get_image": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::get_image");
            }
        
            // ref object
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIImage* result = ref.image;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAAnnotationView::get_customCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::get_customCalloutView");
            }
        
            // ref object
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MACustomCalloutView* result = ref.customCalloutView;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAAnnotationView::get_centerOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::get_centerOffset");
            }
        
            // ref object
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGPoint result = ref.centerOffset;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAAnnotationView::get_calloutOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::get_calloutOffset");
            }
        
            // ref object
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGPoint result = ref.calloutOffset;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAAnnotationView::get_isEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::get_isEnabled");
            }
        
            // ref object
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.enabled;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAAnnotationView::get_isHighlighted": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::get_isHighlighted");
            }
        
            // ref object
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.highlighted;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAAnnotationView::get_isSelected": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::get_isSelected");
            }
        
            // ref object
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.selected;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAAnnotationView::get_canShowCallout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::get_canShowCallout");
            }
        
            // ref object
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.canShowCallout;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAAnnotationView::get_leftCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::get_leftCalloutAccessoryView");
            }
        
            // ref object
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIView* result = ref.leftCalloutAccessoryView;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAAnnotationView::get_rightCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::get_rightCalloutAccessoryView");
            }
        
            // ref object
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIView* result = ref.rightCalloutAccessoryView;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAAnnotationView::get_isDraggable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::get_isDraggable");
            }
        
            // ref object
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.draggable;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAAnnotationView::get_dragState": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::get_dragState");
            }
        
            // ref object
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAAnnotationViewDragState result = ref.dragState;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MATileOverlay::get_tileSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATileOverlay::get_tileSize");
            }
        
            // ref object
            MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGSize result = ref.tileSize;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MATileOverlay::get_minimumZ": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATileOverlay::get_minimumZ");
            }
        
            // ref object
            MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.minimumZ;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MATileOverlay::get_maximumZ": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATileOverlay::get_maximumZ");
            }
        
            // ref object
            MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.maximumZ;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MATileOverlay::get_URLTemplate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATileOverlay::get_URLTemplate");
            }
        
            // ref object
            MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.URLTemplate;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MATileOverlay::get_canReplaceMapContent": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATileOverlay::get_canReplaceMapContent");
            }
        
            // ref object
            MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.canReplaceMapContent;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MATileOverlay::get_boundingMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATileOverlay::get_boundingMapRect");
            }
        
            // ref object
            MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAMapRect result = ref.boundingMapRect;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MATileOverlay::get_disableOffScreenTileLoading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATileOverlay::get_disableOffScreenTileLoading");
            }
        
            // ref object
            MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.disableOffScreenTileLoading;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MATileOverlayPath::get_x": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATileOverlayPath::get_x");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            MATileOverlayPath ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            NSInteger result = ref.x;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MATileOverlayPath::get_y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATileOverlayPath::get_y");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            MATileOverlayPath ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            NSInteger result = ref.y;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MATileOverlayPath::get_z": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATileOverlayPath::get_z");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            MATileOverlayPath ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            NSInteger result = ref.z;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MATileOverlayPath::get_contentScaleFactor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATileOverlayPath::get_contentScaleFactor");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            MATileOverlayPath ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            CGFloat result = ref.contentScaleFactor;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MACustomCalloutView::get_customView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACustomCalloutView::get_customView");
            }
        
            // ref object
            MACustomCalloutView* ref = (MACustomCalloutView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIView* result = ref.customView;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MACustomCalloutView::get_userData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACustomCalloutView::get_userData");
            }
        
            // ref object
            MACustomCalloutView* ref = (MACustomCalloutView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSObject* result = ref.userData;
        
            // return a ref
            HEAP[@(((NSObject*) result).hash)] = result;
            NSNumber* jsonableResult = @(((NSObject*) result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAOfflineItemCommonCity::get_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOfflineItemCommonCity::get_province");
            }
        
            // ref object
            MAOfflineItemCommonCity* ref = (MAOfflineItemCommonCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAOfflineItem* result = ref.province;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAOfflineMap::get_provinces": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOfflineMap::get_provinces");
            }
        
            // ref object
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<MAOfflineProvince*>* result = ref.provinces;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"MAOfflineMap::get_municipalities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOfflineMap::get_municipalities");
            }
        
            // ref object
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<MAOfflineItemMunicipality*>* result = ref.municipalities;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"MAOfflineMap::get_nationWide": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOfflineMap::get_nationWide");
            }
        
            // ref object
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAOfflineItemNationWide* result = ref.nationWide;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAOfflineMap::get_cities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOfflineMap::get_cities");
            }
        
            // ref object
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<MAOfflineCity*>* result = ref.cities;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"MAOfflineMap::get_version": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOfflineMap::get_version");
            }
        
            // ref object
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.version;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAOfflineMap::get_offlineCities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOfflineMap::get_offlineCities");
            }
        
            // ref object
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray* result = ref.offlineCities;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"MACircleRenderer::get_circle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACircleRenderer::get_circle");
            }
        
            // ref object
            MACircleRenderer* ref = (MACircleRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MACircle* result = ref.circle;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAParticleOverlayRenderer::get_particleOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAParticleOverlayRenderer::get_particleOverlay");
            }
        
            // ref object
            MAParticleOverlayRenderer* ref = (MAParticleOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAParticleOverlay* result = ref.particleOverlay;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MACoordinateBounds::get_northEast": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACoordinateBounds::get_northEast");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            MACoordinateBounds ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.northEast;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MACoordinateBounds::get_southWest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACoordinateBounds::get_southWest");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            MACoordinateBounds ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.southWest;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MACoordinateSpan::get_latitudeDelta": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACoordinateSpan::get_latitudeDelta");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            MACoordinateSpan ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            CLLocationDegrees result = ref.latitudeDelta;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MACoordinateSpan::get_longitudeDelta": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACoordinateSpan::get_longitudeDelta");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            MACoordinateSpan ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            CLLocationDegrees result = ref.longitudeDelta;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MACoordinateRegion::get_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACoordinateRegion::get_center");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            MACoordinateRegion ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.center;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MACoordinateRegion::get_span": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACoordinateRegion::get_span");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            MACoordinateRegion ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            MACoordinateSpan result = ref.span;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateSpan)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapPoint::get_x": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapPoint::get_x");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            MAMapPoint ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            double result = ref.x;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapPoint::get_y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapPoint::get_y");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            MAMapPoint ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            double result = ref.y;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapSize::get_width": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapSize::get_width");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            MAMapSize ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            double result = ref.width;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapSize::get_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapSize::get_height");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            MAMapSize ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            double result = ref.height;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapRect::get_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapRect::get_origin");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            MAMapRect ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            MAMapPoint result = ref.origin;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapRect::get_size": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapRect::get_size");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            MAMapRect ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            MAMapSize result = ref.size;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapSize)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAParticleOverlayOptions::get_visibile": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAParticleOverlayOptions::get_visibile");
            }
        
            // ref object
            MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.visibile;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAParticleOverlayOptions::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAParticleOverlayOptions::get_duration");
            }
        
            // ref object
            MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSTimeInterval result = ref.duration;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAParticleOverlayOptions::get_loop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAParticleOverlayOptions::get_loop");
            }
        
            // ref object
            MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.loop;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAParticleOverlayOptions::get_maxParticles": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAParticleOverlayOptions::get_maxParticles");
            }
        
            // ref object
            MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.maxParticles;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAParticleOverlayOptions::get_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAParticleOverlayOptions::get_icon");
            }
        
            // ref object
            MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIImage* result = ref.icon;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAParticleOverlayOptions::get_startParticleSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAParticleOverlayOptions::get_startParticleSize");
            }
        
            // ref object
            MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGSize result = ref.startParticleSize;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAParticleOverlayOptions::get_particleLifeTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAParticleOverlayOptions::get_particleLifeTime");
            }
        
            // ref object
            MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSTimeInterval result = ref.particleLifeTime;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAParticleOverlayOptions::get_particleStartColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAParticleOverlayOptions::get_particleStartColor");
            }
        
            // ref object
            MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            id<MAParticleColorGenerate> result = ref.particleStartColor;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAParticleOverlayOptions::get_particleStartSpeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAParticleOverlayOptions::get_particleStartSpeed");
            }
        
            // ref object
            MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            id<MAParticleVelocityGenerate> result = ref.particleStartSpeed;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAParticleOverlayOptions::get_particleEmissionModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAParticleOverlayOptions::get_particleEmissionModule");
            }
        
            // ref object
            MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAParticleEmissionModule* result = ref.particleEmissionModule;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAParticleOverlayOptions::get_particleShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAParticleOverlayOptions::get_particleShapeModule");
            }
        
            // ref object
            MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            id<MAParticleShapeModule> result = ref.particleShapeModule;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAParticleOverlayOptions::get_particleOverLifeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAParticleOverlayOptions::get_particleOverLifeModule");
            }
        
            // ref object
            MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAParticleOverLifeModule* result = ref.particleOverLifeModule;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAOverlayRenderer::get_overlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOverlayRenderer::get_overlay");
            }
        
            // ref object
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            id<MAOverlay> result = ref.overlay;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAOverlayRenderer::get_glPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOverlayRenderer::get_glPoints");
            }
        
            // ref object
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGPoint* result = ref.glPoints;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint*)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAOverlayRenderer::get_glPointCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOverlayRenderer::get_glPointCount");
            }
        
            // ref object
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSUInteger result = ref.glPointCount;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAOverlayRenderer::get_strokeImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOverlayRenderer::get_strokeImage");
            }
        
            // ref object
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIImage* result = ref.strokeImage;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAOverlayRenderer::get_alpha": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOverlayRenderer::get_alpha");
            }
        
            // ref object
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.alpha;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAOverlayRenderer::get_contentScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOverlayRenderer::get_contentScale");
            }
        
            // ref object
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.contentScale;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAUserLocation::get_isUpdating": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAUserLocation::get_isUpdating");
            }
        
            // ref object
            MAUserLocation* ref = (MAUserLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.updating;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAUserLocation::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAUserLocation::get_location");
            }
        
            // ref object
            MAUserLocation* ref = (MAUserLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocation* result = ref.location;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAUserLocation::get_heading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAUserLocation::get_heading");
            }
        
            // ref object
            MAUserLocation* ref = (MAUserLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLHeading* result = ref.heading;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMultiPointItem::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiPointItem::get_coordinate");
            }
        
            // ref object
            MAMultiPointItem* ref = (MAMultiPointItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.coordinate;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMultiPointItem::get_customID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiPointItem::get_customID");
            }
        
            // ref object
            MAMultiPointItem* ref = (MAMultiPointItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.customID;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAMultiPointItem::get_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiPointItem::get_title");
            }
        
            // ref object
            MAMultiPointItem* ref = (MAMultiPointItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.title;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAMultiPointItem::get_subtitle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiPointItem::get_subtitle");
            }
        
            // ref object
            MAMultiPointItem* ref = (MAMultiPointItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.subtitle;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAMultiPointOverlay::get_items": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiPointOverlay::get_items");
            }
        
            // ref object
            MAMultiPointOverlay* ref = (MAMultiPointOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<MAMultiPointItem*>* result = ref.items;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"MACustomBuildingOverlayOption::get_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACustomBuildingOverlayOption::get_height");
            }
        
            // ref object
            MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.height;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MACustomBuildingOverlayOption::get_heightScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACustomBuildingOverlayOption::get_heightScale");
            }
        
            // ref object
            MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.heightScale;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MACustomBuildingOverlayOption::get_topColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACustomBuildingOverlayOption::get_topColor");
            }
        
            // ref object
            MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIColor* result = ref.topColor;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MACustomBuildingOverlayOption::get_sideColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACustomBuildingOverlayOption::get_sideColor");
            }
        
            // ref object
            MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIColor* result = ref.sideColor;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MACustomBuildingOverlayOption::get_visibile": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACustomBuildingOverlayOption::get_visibile");
            }
        
            // ref object
            MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.visibile;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MACustomBuildingOverlay::get_defaultOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACustomBuildingOverlay::get_defaultOption");
            }
        
            // ref object
            MACustomBuildingOverlay* ref = (MACustomBuildingOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MACustomBuildingOverlayOption* result = ref.defaultOption;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MACustomBuildingOverlay::get_customOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACustomBuildingOverlay::get_customOptions");
            }
        
            // ref object
            MACustomBuildingOverlay* ref = (MACustomBuildingOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<MACustomBuildingOverlayOption*>* result = ref.customOptions;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"MATracePoint::get_latitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATracePoint::get_latitude");
            }
        
            // ref object
            MATracePoint* ref = (MATracePoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationDegrees result = ref.latitude;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MATracePoint::get_longitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATracePoint::get_longitude");
            }
        
            // ref object
            MATracePoint* ref = (MATracePoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationDegrees result = ref.longitude;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MATraceLocation::get_loc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATraceLocation::get_loc");
            }
        
            // ref object
            MATraceLocation* ref = (MATraceLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.loc;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MATraceLocation::get_angle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATraceLocation::get_angle");
            }
        
            // ref object
            MATraceLocation* ref = (MATraceLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            double result = ref.angle;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MATraceLocation::get_speed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATraceLocation::get_speed");
            }
        
            // ref object
            MATraceLocation* ref = (MATraceLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            double result = ref.speed;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MATraceLocation::get_time": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATraceLocation::get_time");
            }
        
            // ref object
            MATraceLocation* ref = (MATraceLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            double result = ref.time;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAArc::get_startCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAArc::get_startCoordinate");
            }
        
            // ref object
            MAArc* ref = (MAArc*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.startCoordinate;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAArc::get_passedCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAArc::get_passedCoordinate");
            }
        
            // ref object
            MAArc* ref = (MAArc*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.passedCoordinate;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAArc::get_endCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAArc::get_endCoordinate");
            }
        
            // ref object
            MAArc* ref = (MAArc*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.endCoordinate;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAArc::get_boundingMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAArc::get_boundingMapRect");
            }
        
            // ref object
            MAArc* ref = (MAArc*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAMapRect result = ref.boundingMapRect;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAUserLocationRepresentation::get_showsAccuracyRing": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAUserLocationRepresentation::get_showsAccuracyRing");
            }
        
            // ref object
            MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.showsAccuracyRing;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAUserLocationRepresentation::get_showsHeadingIndicator": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAUserLocationRepresentation::get_showsHeadingIndicator");
            }
        
            // ref object
            MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.showsHeadingIndicator;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAUserLocationRepresentation::get_fillColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAUserLocationRepresentation::get_fillColor");
            }
        
            // ref object
            MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIColor* result = ref.fillColor;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAUserLocationRepresentation::get_strokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAUserLocationRepresentation::get_strokeColor");
            }
        
            // ref object
            MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIColor* result = ref.strokeColor;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAUserLocationRepresentation::get_lineWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAUserLocationRepresentation::get_lineWidth");
            }
        
            // ref object
            MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.lineWidth;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAUserLocationRepresentation::get_locationDotBgColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAUserLocationRepresentation::get_locationDotBgColor");
            }
        
            // ref object
            MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIColor* result = ref.locationDotBgColor;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAUserLocationRepresentation::get_locationDotFillColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAUserLocationRepresentation::get_locationDotFillColor");
            }
        
            // ref object
            MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIColor* result = ref.locationDotFillColor;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAUserLocationRepresentation::get_enablePulseAnnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAUserLocationRepresentation::get_enablePulseAnnimation");
            }
        
            // ref object
            MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.enablePulseAnnimation;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAUserLocationRepresentation::get_image": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAUserLocationRepresentation::get_image");
            }
        
            // ref object
            MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIImage* result = ref.image;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_mapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_mapType");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAMapType result = ref.mapType;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_centerCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_centerCoordinate");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.centerCoordinate;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_region": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_region");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MACoordinateRegion result = ref.region;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_visibleMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_visibleMapRect");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAMapRect result = ref.visibleMapRect;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_limitRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_limitRegion");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MACoordinateRegion result = ref.limitRegion;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_limitMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_limitMapRect");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAMapRect result = ref.limitMapRect;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_zoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_zoomLevel");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.zoomLevel;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_minZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_minZoomLevel");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.minZoomLevel;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_maxZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_maxZoomLevel");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.maxZoomLevel;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_rotationDegree": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_rotationDegree");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.rotationDegree;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_cameraDegree": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_cameraDegree");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.cameraDegree;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_zoomingInPivotsAroundAnchorPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_zoomingInPivotsAroundAnchorPoint");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.zoomingInPivotsAroundAnchorPoint;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_isZoomEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_isZoomEnabled");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.zoomEnabled;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_isScrollEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_isScrollEnabled");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.scrollEnabled;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_isRotateEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_isRotateEnabled");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.rotateEnabled;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_isRotateCameraEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_isRotateCameraEnabled");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.rotateCameraEnabled;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_isSkyModelEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_isSkyModelEnabled");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.skyModelEnable;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_isShowsBuildings": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_isShowsBuildings");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.showsBuildings;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_isShowsLabels": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_isShowsLabels");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.showsLabels;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_isShowTraffic": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_isShowTraffic");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.showTraffic;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_trafficRatio": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_trafficRatio");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.trafficRatio;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_touchPOIEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_touchPOIEnabled");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.touchPOIEnabled;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_showsCompass": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_showsCompass");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.showsCompass;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_compassOrigin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_compassOrigin");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGPoint result = ref.compassOrigin;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_compassSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_compassSize");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGSize result = ref.compassSize;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_showsScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_showsScale");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.showsScale;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_scaleOrigin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_scaleOrigin");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGPoint result = ref.scaleOrigin;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_scaleSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_scaleSize");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGSize result = ref.scaleSize;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_logoCenter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_logoCenter");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGPoint result = ref.logoCenter;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_logoSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_logoSize");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGSize result = ref.logoSize;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_metersPerPointForCurrentZoom": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_metersPerPointForCurrentZoom");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            double result = ref.metersPerPointForCurrentZoom;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_isAbroad": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_isAbroad");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.isAbroad;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_maxRenderFrame": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_maxRenderFrame");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSUInteger result = ref.maxRenderFrame;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_isAllowDecreaseFrame": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_isAllowDecreaseFrame");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.isAllowDecreaseFrame;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_openGLESDisabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_openGLESDisabled");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.openGLESDisabled;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_screenAnchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_screenAnchor");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGPoint result = ref.screenAnchor;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_isShowsWorldMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_isShowsWorldMap");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSNumber* result = ref.showsWorldMap;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_mapLanguage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_mapLanguage");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSNumber* result = ref.mapLanguage;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_annotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_annotations");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray* result = ref.annotations;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_selectedAnnotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_selectedAnnotations");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray* result = ref.selectedAnnotations;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_annotationVisibleRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_annotationVisibleRect");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGRect result = ref.annotationVisibleRect;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGRect)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_allowsAnnotationViewSorting": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_allowsAnnotationViewSorting");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.allowsAnnotationViewSorting;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_showsUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_showsUserLocation");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.showsUserLocation;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_userLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_userLocation");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAUserLocation* result = ref.userLocation;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_customizeUserLocationAccuracyCircleRepresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_customizeUserLocationAccuracyCircleRepresentation");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.customizeUserLocationAccuracyCircleRepresentation;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_userLocationAccuracyCircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_userLocationAccuracyCircle");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MACircle* result = ref.userLocationAccuracyCircle;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_userTrackingMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_userTrackingMode");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAUserTrackingMode result = ref.userTrackingMode;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_isUserLocationVisible": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_isUserLocationVisible");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.userLocationVisible;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_distanceFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_distanceFilter");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationDistance result = ref.distanceFilter;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_desiredAccuracy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_desiredAccuracy");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationAccuracy result = ref.desiredAccuracy;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_headingFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_headingFilter");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationDegrees result = ref.headingFilter;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_pausesLocationUpdatesAutomatically": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_pausesLocationUpdatesAutomatically");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.pausesLocationUpdatesAutomatically;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_allowsBackgroundLocationUpdates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_allowsBackgroundLocationUpdates");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.allowsBackgroundLocationUpdates;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_overlays": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_overlays");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray* result = ref.overlays;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_isShowsIndoorMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_isShowsIndoorMap");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.showsIndoorMap;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_isShowsIndoorMapControl": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_isShowsIndoorMapControl");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.showsIndoorMapControl;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_indoorMapControlSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_indoorMapControlSize");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGSize result = ref.indoorMapControlSize;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAMapView::get_customMapStyleEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapView::get_customMapStyleEnabled");
            }
        
            // ref object
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.customMapStyleEnabled;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAOverlayPathRenderer::get_fillColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOverlayPathRenderer::get_fillColor");
            }
        
            // ref object
            MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIColor* result = ref.fillColor;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAOverlayPathRenderer::get_strokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOverlayPathRenderer::get_strokeColor");
            }
        
            // ref object
            MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            UIColor* result = ref.strokeColor;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAOverlayPathRenderer::get_lineWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOverlayPathRenderer::get_lineWidth");
            }
        
            // ref object
            MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.lineWidth;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAOverlayPathRenderer::get_lineJoinType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOverlayPathRenderer::get_lineJoinType");
            }
        
            // ref object
            MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MALineJoinType result = ref.lineJoinType;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAOverlayPathRenderer::get_lineCapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOverlayPathRenderer::get_lineCapType");
            }
        
            // ref object
            MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MALineCapType result = ref.lineCapType;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAOverlayPathRenderer::get_miterLimit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOverlayPathRenderer::get_miterLimit");
            }
        
            // ref object
            MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.miterLimit;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAOverlayPathRenderer::get_lineDash": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOverlayPathRenderer::get_lineDash");
            }
        
            // ref object
            MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.lineDash;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAOverlayPathRenderer::get_lineDashType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAOverlayPathRenderer::get_lineDashType");
            }
        
            // ref object
            MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MALineDashType result = ref.lineDashType;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"MAGroundOverlayRenderer::get_groundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAGroundOverlayRenderer::get_groundOverlay");
            }
        
            // ref object
            MAGroundOverlayRenderer* ref = (MAGroundOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MAGroundOverlay* result = ref.groundOverlay;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MACustomBuildingOverlayRenderer::get_customBuildingOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACustomBuildingOverlayRenderer::get_customBuildingOverlay");
            }
        
            // ref object
            MACustomBuildingOverlayRenderer* ref = (MACustomBuildingOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            MACustomBuildingOverlay* result = ref.customBuildingOverlay;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"MAOfflineCity::get_cityCode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAOfflineCity* ref = (MAOfflineCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.cityCode;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"MAOfflineCity::get_cityName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAOfflineCity* ref = (MAOfflineCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.cityName;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"MAOfflineCity::get_urlString_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAOfflineCity* ref = (MAOfflineCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.urlString;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
    };
}

@end
