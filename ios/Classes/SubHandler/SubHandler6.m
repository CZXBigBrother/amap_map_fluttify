//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler6.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapMapFluttifyPlugin (SubHandler6)
- (NSDictionary<NSString*, Handler>*) getSubHandler6 {
    return @{
        @"MAOverlayPathRenderer::set_lineDashType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                MALineDashType lineDashType = (MALineDashType) [args[@"lineDashType"] integerValue];
        
                // ref
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.lineDashType = lineDashType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"RefClass::isKindOfMAOfflineCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOfflineCity class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOfflineItemNationWide": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOfflineItemNationWide class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMultiPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMultiPoint class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAGroundOverlay class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAPolygonRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAPolygonRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAPinAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAPinAnnotationView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAHeatMapNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAHeatMapNode class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAHeatMapGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAHeatMapGradient class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAHeatMapTileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAHeatMapTileOverlay class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMapStatus class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAPointAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAPointAnnotation class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMACircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MACircle class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAArcRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAArcRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOfflineMapViewController": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOfflineMapViewController class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMapCustomStyleOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMapCustomStyleOptions class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAPolygon class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleOverlay class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAPolyline class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMultiColoredPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMultiColoredPolylineRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAAnimatedAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAAnimatedAnnotation class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMultiTexturePolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMultiTexturePolylineRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOfflineProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOfflineProvince class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMATileOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MATileOverlayRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOfflineItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOfflineItem class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAGeodesicPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAGeodesicPolyline class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMATouchPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MATouchPoi class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOfflineItemMunicipality": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOfflineItemMunicipality class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMultiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMultiPolyline class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMATraceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MATraceManager class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMultiPointOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMultiPointOverlayRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAIndoorFloorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAIndoorFloorInfo class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAIndoorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAIndoorInfo class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAPolylineRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAAnnotationMoveAnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAAnnotationMoveAnimation class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAShape": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAShape class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAAnnotationView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMATileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MATileOverlay class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMACustomCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MACustomCalloutView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOfflineItemCommonCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOfflineItemCommonCity class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOfflineMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOfflineMap class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMACircleRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MACircleRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleOverlayRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleRandomVelocityGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleRandomVelocityGenerate class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleRandomColorGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleRandomColorGenerate class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleConstantRotationGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleConstantRotationGenerate class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleCurveSizeGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleCurveSizeGenerate class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleEmissionModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleEmissionModule class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleSinglePointShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleSinglePointShapeModule class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleRectShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleRectShapeModule class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleOverLifeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleOverLifeModule class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleOverlayOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleOverlayOptions class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleOverlayOptionsFactory": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleOverlayOptionsFactory class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOverlayRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAUserLocation class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMultiPointItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMultiPointItem class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMultiPointOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMultiPointOverlay class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMACustomBuildingOverlayOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MACustomBuildingOverlayOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMACustomBuildingOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MACustomBuildingOverlay class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMATracePoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MATracePoint class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMATraceLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MATraceLocation class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAArc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAArc class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAUserLocationRepresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAUserLocationRepresentation class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMapView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMapView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOverlayPathRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOverlayPathRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAGroundOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAGroundOverlayRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMACustomBuildingOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MACustomBuildingOverlayRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::asMAOfflineCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAOfflineCity *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAOfflineItemNationWide": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAOfflineItemNationWide *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAMultiPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAMultiPoint *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAGroundOverlay *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAPolygonRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAPolygonRenderer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAPinAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAPinAnnotationView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAHeatMapNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAHeatMapNode *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAHeatMapGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAHeatMapGradient *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAHeatMapTileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAHeatMapTileOverlay *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAMapStatus *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAPointAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAPointAnnotation *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMACircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MACircle *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAArcRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAArcRenderer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAOfflineMapViewController": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAOfflineMapViewController *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAMapCustomStyleOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAMapCustomStyleOptions *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAPolygon *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAParticleOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAParticleOverlay *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAPolyline *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAMultiColoredPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAMultiColoredPolylineRenderer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAAnimatedAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAAnimatedAnnotation *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAMultiTexturePolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAMultiTexturePolylineRenderer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAOfflineProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAOfflineProvince *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMATileOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MATileOverlayRenderer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAOfflineItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAOfflineItem *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAGeodesicPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAGeodesicPolyline *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMATouchPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MATouchPoi *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAOfflineItemMunicipality": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAOfflineItemMunicipality *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAMultiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAMultiPolyline *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMATraceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MATraceManager *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAMultiPointOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAMultiPointOverlayRenderer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAIndoorFloorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAIndoorFloorInfo *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAIndoorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAIndoorInfo *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAPolylineRenderer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAAnnotationMoveAnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAAnnotationMoveAnimation *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAShape": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAShape *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAAnnotationView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMATileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MATileOverlay *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMACustomCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MACustomCalloutView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAOfflineItemCommonCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAOfflineItemCommonCity *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAOfflineMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAOfflineMap *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMACircleRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MACircleRenderer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAParticleOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAParticleOverlayRenderer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAParticleRandomVelocityGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAParticleRandomVelocityGenerate *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAParticleRandomColorGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAParticleRandomColorGenerate *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAParticleConstantRotationGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAParticleConstantRotationGenerate *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAParticleCurveSizeGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAParticleCurveSizeGenerate *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAParticleEmissionModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAParticleEmissionModule *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAParticleSinglePointShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAParticleSinglePointShapeModule *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAParticleRectShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAParticleRectShapeModule *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAParticleOverLifeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAParticleOverLifeModule *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAParticleOverlayOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAParticleOverlayOptions *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAParticleOverlayOptionsFactory": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAParticleOverlayOptionsFactory *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAOverlayRenderer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAUserLocation *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAMultiPointItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAMultiPointItem *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAMultiPointOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAMultiPointOverlay *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMACustomBuildingOverlayOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MACustomBuildingOverlayOption *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMACustomBuildingOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MACustomBuildingOverlay *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMATracePoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MATracePoint *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMATraceLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MATraceLocation *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAArc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAArc *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAUserLocationRepresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAUserLocationRepresentation *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAMapView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAMapView *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAOverlayPathRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAOverlayPathRenderer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMAGroundOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MAGroundOverlayRenderer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asMACustomBuildingOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (MACustomBuildingOverlayRenderer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"ObjectFactory::createMAOfflineCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineCity");
            }
        
            MAOfflineCity* ref = [[MAOfflineCity alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineItemNationWide": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineItemNationWide");
            }
        
            MAOfflineItemNationWide* ref = [[MAOfflineItemNationWide alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiPoint");
            }
        
            MAMultiPoint* ref = [[MAMultiPoint alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAGroundOverlay");
            }
        
            MAGroundOverlay* ref = [[MAGroundOverlay alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPolygonRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPolygonRenderer");
            }
        
            MAPolygonRenderer* ref = [[MAPolygonRenderer alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPinAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPinAnnotationView");
            }
        
            MAPinAnnotationView* ref = [[MAPinAnnotationView alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAHeatMapNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAHeatMapNode");
            }
        
            MAHeatMapNode* ref = [[MAHeatMapNode alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAHeatMapGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAHeatMapGradient");
            }
        
            MAHeatMapGradient* ref = [[MAHeatMapGradient alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAHeatMapTileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAHeatMapTileOverlay");
            }
        
            MAHeatMapTileOverlay* ref = [[MAHeatMapTileOverlay alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapStatus");
            }
        
            MAMapStatus* ref = [[MAMapStatus alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPointAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPointAnnotation");
            }
        
            MAPointAnnotation* ref = [[MAPointAnnotation alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACircle");
            }
        
            MACircle* ref = [[MACircle alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAArcRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAArcRenderer");
            }
        
            MAArcRenderer* ref = [[MAArcRenderer alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineMapViewController": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineMapViewController");
            }
        
            MAOfflineMapViewController* ref = [[MAOfflineMapViewController alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapCustomStyleOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapCustomStyleOptions");
            }
        
            MAMapCustomStyleOptions* ref = [[MAMapCustomStyleOptions alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPolygon");
            }
        
            MAPolygon* ref = [[MAPolygon alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleOverlay");
            }
        
            MAParticleOverlay* ref = [[MAParticleOverlay alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPolyline");
            }
        
            MAPolyline* ref = [[MAPolyline alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiColoredPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiColoredPolylineRenderer");
            }
        
            MAMultiColoredPolylineRenderer* ref = [[MAMultiColoredPolylineRenderer alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAAnimatedAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAAnimatedAnnotation");
            }
        
            MAAnimatedAnnotation* ref = [[MAAnimatedAnnotation alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiTexturePolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiTexturePolylineRenderer");
            }
        
            MAMultiTexturePolylineRenderer* ref = [[MAMultiTexturePolylineRenderer alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineProvince");
            }
        
            MAOfflineProvince* ref = [[MAOfflineProvince alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATileOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATileOverlayRenderer");
            }
        
            MATileOverlayRenderer* ref = [[MATileOverlayRenderer alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineItem");
            }
        
            MAOfflineItem* ref = [[MAOfflineItem alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAGeodesicPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAGeodesicPolyline");
            }
        
            MAGeodesicPolyline* ref = [[MAGeodesicPolyline alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATouchPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATouchPoi");
            }
        
            MATouchPoi* ref = [[MATouchPoi alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineItemMunicipality": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineItemMunicipality");
            }
        
            MAOfflineItemMunicipality* ref = [[MAOfflineItemMunicipality alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiPolyline");
            }
        
            MAMultiPolyline* ref = [[MAMultiPolyline alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATraceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATraceManager");
            }
        
            MATraceManager* ref = [[MATraceManager alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiPointOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiPointOverlayRenderer");
            }
        
            MAMultiPointOverlayRenderer* ref = [[MAMultiPointOverlayRenderer alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAIndoorFloorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAIndoorFloorInfo");
            }
        
            MAIndoorFloorInfo* ref = [[MAIndoorFloorInfo alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAIndoorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAIndoorInfo");
            }
        
            MAIndoorInfo* ref = [[MAIndoorInfo alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPolylineRenderer");
            }
        
            MAPolylineRenderer* ref = [[MAPolylineRenderer alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAAnnotationMoveAnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAAnnotationMoveAnimation");
            }
        
            MAAnnotationMoveAnimation* ref = [[MAAnnotationMoveAnimation alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAShape": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAShape");
            }
        
            MAShape* ref = [[MAShape alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAAnnotationView");
            }
        
            MAAnnotationView* ref = [[MAAnnotationView alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATileOverlay");
            }
        
            MATileOverlay* ref = [[MATileOverlay alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATileOverlayPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATileOverlayPath");
            }
        
            MATileOverlayPath data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MATileOverlayPath)];
            HEAP[@(dataValue.hash)] = dataValue;
        
            methodResult(@(dataValue.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACustomCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACustomCalloutView");
            }
        
            MACustomCalloutView* ref = [[MACustomCalloutView alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineItemCommonCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineItemCommonCity");
            }
        
            MAOfflineItemCommonCity* ref = [[MAOfflineItemCommonCity alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineMap");
            }
        
            MAOfflineMap* ref = [[MAOfflineMap alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACircleRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACircleRenderer");
            }
        
            MACircleRenderer* ref = [[MACircleRenderer alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleOverlayRenderer");
            }
        
            MAParticleOverlayRenderer* ref = [[MAParticleOverlayRenderer alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACoordinateBounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACoordinateBounds");
            }
        
            MACoordinateBounds data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateBounds)];
            HEAP[@(dataValue.hash)] = dataValue;
        
            methodResult(@(dataValue.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACoordinateSpan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACoordinateSpan");
            }
        
            MACoordinateSpan data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateSpan)];
            HEAP[@(dataValue.hash)] = dataValue;
        
            methodResult(@(dataValue.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACoordinateRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACoordinateRegion");
            }
        
            MACoordinateRegion data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateRegion)];
            HEAP[@(dataValue.hash)] = dataValue;
        
            methodResult(@(dataValue.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapPoint");
            }
        
            MAMapPoint data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapPoint)];
            HEAP[@(dataValue.hash)] = dataValue;
        
            methodResult(@(dataValue.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapSize");
            }
        
            MAMapSize data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapSize)];
            HEAP[@(dataValue.hash)] = dataValue;
        
            methodResult(@(dataValue.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapRect");
            }
        
            MAMapRect data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapRect)];
            HEAP[@(dataValue.hash)] = dataValue;
        
            methodResult(@(dataValue.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleRandomVelocityGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleRandomVelocityGenerate");
            }
        
            MAParticleRandomVelocityGenerate* ref = [[MAParticleRandomVelocityGenerate alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleRandomColorGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleRandomColorGenerate");
            }
        
            MAParticleRandomColorGenerate* ref = [[MAParticleRandomColorGenerate alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleConstantRotationGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleConstantRotationGenerate");
            }
        
            MAParticleConstantRotationGenerate* ref = [[MAParticleConstantRotationGenerate alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleCurveSizeGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleCurveSizeGenerate");
            }
        
            MAParticleCurveSizeGenerate* ref = [[MAParticleCurveSizeGenerate alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleEmissionModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleEmissionModule");
            }
        
            MAParticleEmissionModule* ref = [[MAParticleEmissionModule alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleSinglePointShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleSinglePointShapeModule");
            }
        
            MAParticleSinglePointShapeModule* ref = [[MAParticleSinglePointShapeModule alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleRectShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleRectShapeModule");
            }
        
            MAParticleRectShapeModule* ref = [[MAParticleRectShapeModule alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleOverLifeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleOverLifeModule");
            }
        
            MAParticleOverLifeModule* ref = [[MAParticleOverLifeModule alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleOverlayOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleOverlayOptions");
            }
        
            MAParticleOverlayOptions* ref = [[MAParticleOverlayOptions alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleOverlayOptionsFactory": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleOverlayOptionsFactory");
            }
        
            MAParticleOverlayOptionsFactory* ref = [[MAParticleOverlayOptionsFactory alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOverlayRenderer");
            }
        
            MAOverlayRenderer* ref = [[MAOverlayRenderer alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAUserLocation");
            }
        
            MAUserLocation* ref = [[MAUserLocation alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiPointItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiPointItem");
            }
        
            MAMultiPointItem* ref = [[MAMultiPointItem alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiPointOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiPointOverlay");
            }
        
            MAMultiPointOverlay* ref = [[MAMultiPointOverlay alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACustomBuildingOverlayOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACustomBuildingOverlayOption");
            }
        
            MACustomBuildingOverlayOption* ref = [[MACustomBuildingOverlayOption alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACustomBuildingOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACustomBuildingOverlay");
            }
        
            MACustomBuildingOverlay* ref = [[MACustomBuildingOverlay alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATracePoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATracePoint");
            }
        
            MATracePoint* ref = [[MATracePoint alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATraceLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATraceLocation");
            }
        
            MATraceLocation* ref = [[MATraceLocation alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
    };
}

@end
