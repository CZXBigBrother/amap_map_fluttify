//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.amap_map_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import me.yohom.amap_map_fluttify.AmapMapFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler10 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::downloadByCityName", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::downloadByCityName(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.downloadByCityName(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::downloadByProvinceName", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::downloadByProvinceName(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.downloadByProvinceName(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::remove", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::remove(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.remove(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::getOfflineMapProvinceList", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::getOfflineMapProvinceList(" + "" + ")");
                }
            
                // invoke native method
                java.util.ArrayList<com.amap.api.maps.offlinemap.OfflineMapProvince> result;
                try {
                    result = ref.getOfflineMapProvinceList();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (result != null) {
                    jsonableResult = new ArrayList<>();
                    for (com.amap.api.maps.offlinemap.OfflineMapProvince item : result) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::getItemByCityCode", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::getItemByCityCode(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.offlinemap.OfflineMapCity result;
                try {
                    result = ref.getItemByCityCode(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::getItemByCityName", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::getItemByCityName(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.offlinemap.OfflineMapCity result;
                try {
                    result = ref.getItemByCityName(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::getItemByProvinceName", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::getItemByProvinceName(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.offlinemap.OfflineMapProvince result;
                try {
                    result = ref.getItemByProvinceName(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::getOfflineMapCityList", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::getOfflineMapCityList(" + "" + ")");
                }
            
                // invoke native method
                java.util.ArrayList<com.amap.api.maps.offlinemap.OfflineMapCity> result;
                try {
                    result = ref.getOfflineMapCityList();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (result != null) {
                    jsonableResult = new ArrayList<>();
                    for (com.amap.api.maps.offlinemap.OfflineMapCity item : result) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::getDownloadingCityList", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::getDownloadingCityList(" + "" + ")");
                }
            
                // invoke native method
                java.util.ArrayList<com.amap.api.maps.offlinemap.OfflineMapCity> result;
                try {
                    result = ref.getDownloadingCityList();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (result != null) {
                    jsonableResult = new ArrayList<>();
                    for (com.amap.api.maps.offlinemap.OfflineMapCity item : result) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::getDownloadingProvinceList", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::getDownloadingProvinceList(" + "" + ")");
                }
            
                // invoke native method
                java.util.ArrayList<com.amap.api.maps.offlinemap.OfflineMapProvince> result;
                try {
                    result = ref.getDownloadingProvinceList();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (result != null) {
                    jsonableResult = new ArrayList<>();
                    for (com.amap.api.maps.offlinemap.OfflineMapProvince item : result) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::getDownloadOfflineMapCityList", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::getDownloadOfflineMapCityList(" + "" + ")");
                }
            
                // invoke native method
                java.util.ArrayList<com.amap.api.maps.offlinemap.OfflineMapCity> result;
                try {
                    result = ref.getDownloadOfflineMapCityList();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (result != null) {
                    jsonableResult = new ArrayList<>();
                    for (com.amap.api.maps.offlinemap.OfflineMapCity item : result) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::getDownloadOfflineMapProvinceList", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::getDownloadOfflineMapProvinceList(" + "" + ")");
                }
            
                // invoke native method
                java.util.ArrayList<com.amap.api.maps.offlinemap.OfflineMapProvince> result;
                try {
                    result = ref.getDownloadOfflineMapProvinceList();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (result != null) {
                    jsonableResult = new ArrayList<>();
                    for (com.amap.api.maps.offlinemap.OfflineMapProvince item : result) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::updateOfflineCityByCode", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::updateOfflineCityByCode(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.updateOfflineCityByCode(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::updateOfflineCityByName", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::updateOfflineCityByName(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.updateOfflineCityByName(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::updateOfflineMapProvinceByName", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::updateOfflineMapProvinceByName(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.updateOfflineMapProvinceByName(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::restart", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::restart(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.restart();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::stop", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::stop(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.stop();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::pause", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::pause(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.pause();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::destroy", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::destroy(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.destroy();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager::setOnOfflineLoadedListener", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.offlinemap.OfflineMapManager.OfflineLoadedListener var1 = (com.amap.api.maps.offlinemap.OfflineMapManager.OfflineLoadedListener) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager ref = (com.amap.api.maps.offlinemap.OfflineMapManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager@" + refId + "::setOnOfflineLoadedListener(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setOnOfflineLoadedListener(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapCity::getUrl", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapCity ref = (com.amap.api.maps.offlinemap.OfflineMapCity) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapCity@" + refId + "::getUrl(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getUrl();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapCity::setUrl", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapCity ref = (com.amap.api.maps.offlinemap.OfflineMapCity) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapCity@" + refId + "::setUrl(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setUrl(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapCity::getSize", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapCity ref = (com.amap.api.maps.offlinemap.OfflineMapCity) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapCity@" + refId + "::getSize(" + "" + ")");
                }
            
                // invoke native method
                long result;
                try {
                    result = ref.getSize();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                long jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapCity::setSize", (args, methodResult) -> {
                // args
                // jsonable arg
                long var1 = (long) (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapCity ref = (com.amap.api.maps.offlinemap.OfflineMapCity) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapCity@" + refId + "::setSize(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setSize(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapCity::getState", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapCity ref = (com.amap.api.maps.offlinemap.OfflineMapCity) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapCity@" + refId + "::getState(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getState();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapCity::setState", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapCity ref = (com.amap.api.maps.offlinemap.OfflineMapCity) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapCity@" + refId + "::setState(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setState(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapCity::getVersion", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapCity ref = (com.amap.api.maps.offlinemap.OfflineMapCity) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapCity@" + refId + "::getVersion(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getVersion();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapCity::setVersion", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapCity ref = (com.amap.api.maps.offlinemap.OfflineMapCity) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapCity@" + refId + "::setVersion(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setVersion(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapCity::getcompleteCode", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapCity ref = (com.amap.api.maps.offlinemap.OfflineMapCity) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapCity@" + refId + "::getcompleteCode(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getcompleteCode();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapCity::setCompleteCode", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapCity ref = (com.amap.api.maps.offlinemap.OfflineMapCity) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapCity@" + refId + "::setCompleteCode(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setCompleteCode(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapActivity::showScr", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapActivity ref = (com.amap.api.maps.offlinemap.OfflineMapActivity) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapActivity@" + refId + "::showScr(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.showScr();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapActivity::closeScr", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapActivity ref = (com.amap.api.maps.offlinemap.OfflineMapActivity) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapActivity@" + refId + "::closeScr(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.closeScr();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapActivity::closeScr__android_os_Bundle", (args, methodResult) -> {
                // args
                // ref arg
                android.os.Bundle var1 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapActivity ref = (com.amap.api.maps.offlinemap.OfflineMapActivity) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapActivity@" + refId + "::closeScr(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.closeScr(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapActivity::onClick", (args, methodResult) -> {
                // args
                // ref arg
                android.view.View var1 = (android.view.View) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapActivity ref = (com.amap.api.maps.offlinemap.OfflineMapActivity) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapActivity@" + refId + "::onClick(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onClick(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.City::setCity", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.City ref = (com.amap.api.maps.offlinemap.City) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.City@" + refId + "::setCity(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setCity(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.City::getCity", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.City ref = (com.amap.api.maps.offlinemap.City) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.City@" + refId + "::getCity(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getCity();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.City::setCode", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.City ref = (com.amap.api.maps.offlinemap.City) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.City@" + refId + "::setCode(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setCode(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.City::getCode", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.City ref = (com.amap.api.maps.offlinemap.City) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.City@" + refId + "::getCode(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getCode();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.City::getJianpin", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.City ref = (com.amap.api.maps.offlinemap.City) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.City@" + refId + "::getJianpin(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getJianpin();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.City::setJianpin", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.City ref = (com.amap.api.maps.offlinemap.City) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.City@" + refId + "::setJianpin(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setJianpin(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.City::getPinyin", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.City ref = (com.amap.api.maps.offlinemap.City) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.City@" + refId + "::getPinyin(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getPinyin();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.City::setPinyin", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.City ref = (com.amap.api.maps.offlinemap.City) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.City@" + refId + "::setPinyin(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setPinyin(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.City::getAdcode", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.City ref = (com.amap.api.maps.offlinemap.City) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.City@" + refId + "::getAdcode(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getAdcode();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.City::setAdcode", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.City ref = (com.amap.api.maps.offlinemap.City) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.City@" + refId + "::setAdcode(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setAdcode(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.offlinemap.OfflineMapManager.OfflineLoadedListener::onVerifyComplete", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.offlinemap.OfflineMapManager.OfflineLoadedListener ref = (com.amap.api.maps.offlinemap.OfflineMapManager.OfflineLoadedListener) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.offlinemap.OfflineMapManager.OfflineLoadedListener@" + refId + "::onVerifyComplete(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.onVerifyComplete();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.Projection::fromScreenLocation", (args, methodResult) -> {
                // args
                // ref arg
                android.graphics.Point var1 = (android.graphics.Point) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.Projection ref = (com.amap.api.maps.Projection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.Projection@" + refId + "::fromScreenLocation(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.LatLng result;
                try {
                    result = ref.fromScreenLocation(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.Projection::toScreenLocation", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.Projection ref = (com.amap.api.maps.Projection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.Projection@" + refId + "::toScreenLocation(" + var1 + ")");
                }
            
                // invoke native method
                android.graphics.Point result;
                try {
                    result = ref.toScreenLocation(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.Projection::toMapLocation", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.Projection ref = (com.amap.api.maps.Projection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.Projection@" + refId + "::toMapLocation(" + var1 + ")");
                }
            
                // invoke native method
                android.graphics.PointF result;
                try {
                    result = ref.toMapLocation(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.Projection::toOpenGLLocation", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.Projection ref = (com.amap.api.maps.Projection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.Projection@" + refId + "::toOpenGLLocation(" + var1 + ")");
                }
            
                // invoke native method
                android.graphics.PointF result;
                try {
                    result = ref.toOpenGLLocation(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.Projection::toOpenGLWidth", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.Projection ref = (com.amap.api.maps.Projection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.Projection@" + refId + "::toOpenGLWidth(" + var1 + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.toOpenGLWidth(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.Projection::getVisibleRegion", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.Projection ref = (com.amap.api.maps.Projection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.Projection@" + refId + "::getVisibleRegion(" + "" + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.VisibleRegion result;
                try {
                    result = ref.getVisibleRegion();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.Projection::fromBoundsToTile", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.LatLngBounds var1 = (com.amap.api.maps.model.LatLngBounds) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.Projection ref = (com.amap.api.maps.Projection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.Projection@" + refId + "::fromBoundsToTile(" + var1 + var2 + var3 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.TileProjection result;
                try {
                    result = ref.fromBoundsToTile(var1, var2, var3);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.Projection::getMapBounds", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.Projection ref = (com.amap.api.maps.Projection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.Projection@" + refId + "::getMapBounds(" + var1 + var2 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.LatLngBounds result;
                try {
                    result = ref.getMapBounds(var1, new Double(var2).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.Projection::getCameraInfo", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.Projection ref = (com.amap.api.maps.Projection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.Projection@" + refId + "::getCameraInfo(" + "" + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.AMapCameraInfo result;
                try {
                    result = ref.getCameraInfo();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter::getInfoWindowClick", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.Marker var1 = (com.amap.api.maps.model.Marker) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter ref = (com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter@" + refId + "::getInfoWindowClick(" + var1 + ")");
                }
            
                // invoke native method
                android.view.View result;
                try {
                    result = ref.getInfoWindowClick(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter::getOverturnInfoWindow", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.Marker var1 = (com.amap.api.maps.model.Marker) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter ref = (com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter@" + refId + "::getOverturnInfoWindow(" + var1 + ")");
                }
            
                // invoke native method
                android.view.View result;
                try {
                    result = ref.getOverturnInfoWindow(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter::getOverturnInfoWindowClick", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.Marker var1 = (com.amap.api.maps.model.Marker) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter ref = (com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.AMap.MultiPositionInfoWindowAdapter@" + refId + "::getOverturnInfoWindowClick(" + var1 + ")");
                }
            
                // invoke native method
                android.view.View result;
                try {
                    result = ref.getOverturnInfoWindowClick(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::remove", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::remove(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.remove();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::getId", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::getId(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getId();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::setPoints", (args, methodResult) -> {
                // args
                // list arg
                List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var1");
                java.util.List<com.amap.api.maps.model.LatLng> var1 = new ArrayList<>();
                for (int refId : var1RefIdList) {
                    ((ArrayList<com.amap.api.maps.model.LatLng>) var1).add((com.amap.api.maps.model.LatLng) getHEAP().get(refId));
                }
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::setPoints(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setPoints((ArrayList) var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::getPoints", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::getPoints(" + "" + ")");
                }
            
                // invoke native method
                java.util.List<com.amap.api.maps.model.LatLng> result;
                try {
                    result = ref.getPoints();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (result != null) {
                    jsonableResult = new ArrayList<>();
                    for (com.amap.api.maps.model.LatLng item : result) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::setHoleOptions", (args, methodResult) -> {
                // args
                // list arg
                List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var1");
                java.util.List<com.amap.api.maps.model.BaseHoleOptions> var1 = new ArrayList<>();
                for (int refId : var1RefIdList) {
                    ((ArrayList<com.amap.api.maps.model.BaseHoleOptions>) var1).add((com.amap.api.maps.model.BaseHoleOptions) getHEAP().get(refId));
                }
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::setHoleOptions(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setHoleOptions((ArrayList) var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::getHoleOptions", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::getHoleOptions(" + "" + ")");
                }
            
                // invoke native method
                java.util.List<com.amap.api.maps.model.BaseHoleOptions> result;
                try {
                    result = ref.getHoleOptions();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (result != null) {
                    jsonableResult = new ArrayList<>();
                    for (com.amap.api.maps.model.BaseHoleOptions item : result) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::setStrokeWidth", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::setStrokeWidth(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setStrokeWidth(new Double(var1).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::getStrokeWidth", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::getStrokeWidth(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getStrokeWidth();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::setStrokeColor", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::setStrokeColor(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setStrokeColor(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::getStrokeColor", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::getStrokeColor(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getStrokeColor();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::setFillColor", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::setFillColor(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setFillColor(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::getFillColor", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::getFillColor(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getFillColor();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::setZIndex", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::setZIndex(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setZIndex(new Double(var1).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::getZIndex", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::getZIndex(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getZIndex();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::setVisible", (args, methodResult) -> {
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::setVisible(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setVisible(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::isVisible", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::isVisible(" + "" + ")");
                }
            
                // invoke native method
                boolean result;
                try {
                    result = ref.isVisible();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Polygon::contains", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Polygon ref = (com.amap.api.maps.model.Polygon) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Polygon@" + refId + "::contains(" + var1 + ")");
                }
            
                // invoke native method
                boolean result;
                try {
                    result = ref.contains(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.BitmapDescriptor::getId", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.BitmapDescriptor ref = (com.amap.api.maps.model.BitmapDescriptor) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.BitmapDescriptor@" + refId + "::getId(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getId();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.BitmapDescriptor::clone", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.BitmapDescriptor ref = (com.amap.api.maps.model.BitmapDescriptor) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.BitmapDescriptor@" + refId + "::clone(" + "" + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.BitmapDescriptor result;
                try {
                    result = ref.clone();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.BitmapDescriptor::getBitmap", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.BitmapDescriptor ref = (com.amap.api.maps.model.BitmapDescriptor) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.BitmapDescriptor@" + refId + "::getBitmap(" + "" + ")");
                }
            
                // invoke native method
                android.graphics.Bitmap result;
                try {
                    result = ref.getBitmap();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.BitmapDescriptor::getWidth", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.BitmapDescriptor ref = (com.amap.api.maps.model.BitmapDescriptor) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.BitmapDescriptor@" + refId + "::getWidth(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getWidth();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.BitmapDescriptor::getHeight", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.BitmapDescriptor ref = (com.amap.api.maps.model.BitmapDescriptor) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.BitmapDescriptor@" + refId + "::getHeight(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getHeight();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolygonHoleOptions::addAll", (args, methodResult) -> {
                // args
                // list arg
                List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var1");
                java.lang.Iterable<com.amap.api.maps.model.LatLng> var1 = new ArrayList<>();
                for (int refId : var1RefIdList) {
                    ((ArrayList<com.amap.api.maps.model.LatLng>) var1).add((com.amap.api.maps.model.LatLng) getHEAP().get(refId));
                }
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolygonHoleOptions ref = (com.amap.api.maps.model.PolygonHoleOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolygonHoleOptions@" + refId + "::addAll(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolygonHoleOptions result;
                try {
                    result = ref.addAll((ArrayList) var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolygonHoleOptions::getPoints", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolygonHoleOptions ref = (com.amap.api.maps.model.PolygonHoleOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolygonHoleOptions@" + refId + "::getPoints(" + "" + ")");
                }
            
                // invoke native method
                java.util.List<com.amap.api.maps.model.LatLng> result;
                try {
                    result = ref.getPoints();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (result != null) {
                    jsonableResult = new ArrayList<>();
                    for (com.amap.api.maps.model.LatLng item : result) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Poi::getName", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Poi ref = (com.amap.api.maps.model.Poi) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Poi@" + refId + "::getName(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getName();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Poi::getCoordinate", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Poi ref = (com.amap.api.maps.model.Poi) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Poi@" + refId + "::getCoordinate(" + "" + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.LatLng result;
                try {
                    result = ref.getCoordinate();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Poi::getPoiId", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Poi ref = (com.amap.api.maps.model.Poi) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Poi@" + refId + "::getPoiId(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getPoiId();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::myLocationIcon", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.BitmapDescriptor var1 = (com.amap.api.maps.model.BitmapDescriptor) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::myLocationIcon(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.MyLocationStyle result;
                try {
                    result = ref.myLocationIcon(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::anchor", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::anchor(" + var1 + var2 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.MyLocationStyle result;
                try {
                    result = ref.anchor(new Double(var1).floatValue(), new Double(var2).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::radiusFillColor", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::radiusFillColor(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.MyLocationStyle result;
                try {
                    result = ref.radiusFillColor(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::strokeColor", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::strokeColor(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.MyLocationStyle result;
                try {
                    result = ref.strokeColor(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::strokeWidth", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::strokeWidth(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.MyLocationStyle result;
                try {
                    result = ref.strokeWidth(new Double(var1).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::myLocationType", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::myLocationType(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.MyLocationStyle result;
                try {
                    result = ref.myLocationType(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::interval", (args, methodResult) -> {
                // args
                // jsonable arg
                long var1 = (long) (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::interval(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.MyLocationStyle result;
                try {
                    result = ref.interval(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::showMyLocation", (args, methodResult) -> {
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::showMyLocation(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.MyLocationStyle result;
                try {
                    result = ref.showMyLocation(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::getMyLocationIcon", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::getMyLocationIcon(" + "" + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.BitmapDescriptor result;
                try {
                    result = ref.getMyLocationIcon();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::getAnchorU", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::getAnchorU(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getAnchorU();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::getAnchorV", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::getAnchorV(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getAnchorV();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::getRadiusFillColor", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::getRadiusFillColor(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getRadiusFillColor();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::getStrokeColor", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::getStrokeColor(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getStrokeColor();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::getStrokeWidth", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::getStrokeWidth(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getStrokeWidth();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::getMyLocationType", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::getMyLocationType(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getMyLocationType();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::getInterval", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::getInterval(" + "" + ")");
                }
            
                // invoke native method
                long result;
                try {
                    result = ref.getInterval();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                long jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MyLocationStyle::isMyLocationShowing", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MyLocationStyle ref = (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MyLocationStyle@" + refId + "::isMyLocationShowing(" + "" + ")");
                }
            
                // invoke native method
                boolean result;
                try {
                    result = ref.isMyLocationShowing();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.RouteOverlay::removeRouteName", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.RouteOverlay ref = (com.amap.api.maps.model.RouteOverlay) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.RouteOverlay@" + refId + "::removeRouteName(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.removeRouteName();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.RouteOverlay::remove", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.RouteOverlay ref = (com.amap.api.maps.model.RouteOverlay) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.RouteOverlay@" + refId + "::remove(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.remove();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.CircleHoleOptions::center", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.CircleHoleOptions ref = (com.amap.api.maps.model.CircleHoleOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.CircleHoleOptions@" + refId + "::center(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.CircleHoleOptions result;
                try {
                    result = ref.center(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.CircleHoleOptions::radius", (args, methodResult) -> {
                // args
                // jsonable arg
                double var1 = (double) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.CircleHoleOptions ref = (com.amap.api.maps.model.CircleHoleOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.CircleHoleOptions@" + refId + "::radius(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.CircleHoleOptions result;
                try {
                    result = ref.radius(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.CircleHoleOptions::getCenter", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.CircleHoleOptions ref = (com.amap.api.maps.model.CircleHoleOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.CircleHoleOptions@" + refId + "::getCenter(" + "" + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.LatLng result;
                try {
                    result = ref.getCenter();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.CircleHoleOptions::getRadius", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.CircleHoleOptions ref = (com.amap.api.maps.model.CircleHoleOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.CircleHoleOptions@" + refId + "::getRadius(" + "" + ")");
                }
            
                // invoke native method
                double result;
                try {
                    result = ref.getRadius();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                double jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::remove", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::remove(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.remove();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::destroy", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::destroy(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.destroy();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::getId", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::getId(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getId();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::setPosition", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::setPosition(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setPosition(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::getPosition", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::getPosition(" + "" + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.LatLng result;
                try {
                    result = ref.getPosition();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::setText", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::setText(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setText(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::getText", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::getText(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getText();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::setBackgroundColor", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::setBackgroundColor(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setBackgroundColor(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::getBackgroundColor", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::getBackgroundColor(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getBackgroundColor();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::setFontColor", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::setFontColor(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setFontColor(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::getFontColor", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::getFontColor(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getFontColor();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::setFontSize", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::setFontSize(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setFontSize(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::getFontSize", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::getFontSize(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getFontSize();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::setAlign", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::setAlign(" + var1 + var2 + ")");
                }
            
                // invoke native method
                try {
                    ref.setAlign(var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::getAlignX", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::getAlignX(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getAlignX();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::getAlignY", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::getAlignY(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getAlignY();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::setVisible", (args, methodResult) -> {
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::setVisible(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setVisible(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::isVisible", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::isVisible(" + "" + ")");
                }
            
                // invoke native method
                boolean result;
                try {
                    result = ref.isVisible();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::setObject", (args, methodResult) -> {
                // args
                // jsonable arg
                Object var1 = (Object) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::setObject(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setObject(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::getObject", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::getObject(" + "" + ")");
                }
            
                // invoke native method
                Object result;
                try {
                    result = ref.getObject();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Object jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::setRotate", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::setRotate(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setRotate(new Double(var1).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::getRotate", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::getRotate(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getRotate();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::setZIndex", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::setZIndex(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setZIndex(new Double(var1).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.Text::getZIndex", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Text ref = (com.amap.api.maps.model.Text) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.Text@" + refId + "::getZIndex(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getZIndex();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.LatLngBounds.Builder::include", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.LatLngBounds.Builder ref = (com.amap.api.maps.model.LatLngBounds.Builder) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.LatLngBounds.Builder@" + refId + "::include(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.LatLngBounds.Builder result;
                try {
                    result = ref.include(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.LatLngBounds.Builder::build", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.LatLngBounds.Builder ref = (com.amap.api.maps.model.LatLngBounds.Builder) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.LatLngBounds.Builder@" + refId + "::build(" + "" + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.LatLngBounds result;
                try {
                    result = ref.build();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.NavigateArrowOptions::add__com_amap_api_maps_model_LatLng", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.NavigateArrowOptions ref = (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.NavigateArrowOptions@" + refId + "::add(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.NavigateArrowOptions result;
                try {
                    result = ref.add(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.NavigateArrowOptions::addAll", (args, methodResult) -> {
                // args
                // list arg
                List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var1");
                java.lang.Iterable<com.amap.api.maps.model.LatLng> var1 = new ArrayList<>();
                for (int refId : var1RefIdList) {
                    ((ArrayList<com.amap.api.maps.model.LatLng>) var1).add((com.amap.api.maps.model.LatLng) getHEAP().get(refId));
                }
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.NavigateArrowOptions ref = (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.NavigateArrowOptions@" + refId + "::addAll(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.NavigateArrowOptions result;
                try {
                    result = ref.addAll((ArrayList) var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.NavigateArrowOptions::width", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.NavigateArrowOptions ref = (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.NavigateArrowOptions@" + refId + "::width(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.NavigateArrowOptions result;
                try {
                    result = ref.width(new Double(var1).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.NavigateArrowOptions::topColor", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.NavigateArrowOptions ref = (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.NavigateArrowOptions@" + refId + "::topColor(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.NavigateArrowOptions result;
                try {
                    result = ref.topColor(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.NavigateArrowOptions::sideColor", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.NavigateArrowOptions ref = (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.NavigateArrowOptions@" + refId + "::sideColor(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.NavigateArrowOptions result;
                try {
                    result = ref.sideColor(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.NavigateArrowOptions::zIndex", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.NavigateArrowOptions ref = (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.NavigateArrowOptions@" + refId + "::zIndex(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.NavigateArrowOptions result;
                try {
                    result = ref.zIndex(new Double(var1).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.NavigateArrowOptions::visible", (args, methodResult) -> {
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.NavigateArrowOptions ref = (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.NavigateArrowOptions@" + refId + "::visible(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.NavigateArrowOptions result;
                try {
                    result = ref.visible(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.NavigateArrowOptions::set3DModel", (args, methodResult) -> {
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.NavigateArrowOptions ref = (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.NavigateArrowOptions@" + refId + "::set3DModel(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.NavigateArrowOptions result;
                try {
                    result = ref.set3DModel(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.NavigateArrowOptions::getPoints", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.NavigateArrowOptions ref = (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.NavigateArrowOptions@" + refId + "::getPoints(" + "" + ")");
                }
            
                // invoke native method
                java.util.List<com.amap.api.maps.model.LatLng> result;
                try {
                    result = ref.getPoints();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (result != null) {
                    jsonableResult = new ArrayList<>();
                    for (com.amap.api.maps.model.LatLng item : result) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.NavigateArrowOptions::getWidth", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.NavigateArrowOptions ref = (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.NavigateArrowOptions@" + refId + "::getWidth(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getWidth();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.NavigateArrowOptions::getTopColor", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.NavigateArrowOptions ref = (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.NavigateArrowOptions@" + refId + "::getTopColor(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getTopColor();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.NavigateArrowOptions::getSideColor", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.NavigateArrowOptions ref = (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.NavigateArrowOptions@" + refId + "::getSideColor(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getSideColor();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.NavigateArrowOptions::getZIndex", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.NavigateArrowOptions ref = (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.NavigateArrowOptions@" + refId + "::getZIndex(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getZIndex();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.NavigateArrowOptions::isVisible", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.NavigateArrowOptions ref = (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.NavigateArrowOptions@" + refId + "::isVisible(" + "" + ")");
                }
            
                // invoke native method
                boolean result;
                try {
                    result = ref.isVisible();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.NavigateArrowOptions::is3DModel", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.NavigateArrowOptions ref = (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.NavigateArrowOptions@" + refId + "::is3DModel(" + "" + ")");
                }
            
                // invoke native method
                boolean result;
                try {
                    result = ref.is3DModel();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.NavigateArrowOptions::setPoints", (args, methodResult) -> {
                // args
                // list arg
                List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var1");
                java.util.List<com.amap.api.maps.model.LatLng> var1 = new ArrayList<>();
                for (int refId : var1RefIdList) {
                    ((ArrayList<com.amap.api.maps.model.LatLng>) var1).add((com.amap.api.maps.model.LatLng) getHEAP().get(refId));
                }
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.NavigateArrowOptions ref = (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.NavigateArrowOptions@" + refId + "::setPoints(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setPoints((ArrayList) var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.BitmapDescriptorFactory::fromResource", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.BitmapDescriptorFactory::fromResource(" + var0 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.BitmapDescriptor result;
                try {
                    result = com.amap.api.maps.model.BitmapDescriptorFactory.fromResource(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.BitmapDescriptorFactory::fromView", (args, methodResult) -> {
                // args
                // ref arg
                android.view.View var0 = (android.view.View) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.BitmapDescriptorFactory::fromView(" + var0 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.BitmapDescriptor result;
                try {
                    result = com.amap.api.maps.model.BitmapDescriptorFactory.fromView(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.BitmapDescriptorFactory::fromPath", (args, methodResult) -> {
                // args
                // jsonable arg
                String var0 = (String) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.BitmapDescriptorFactory::fromPath(" + var0 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.BitmapDescriptor result;
                try {
                    result = com.amap.api.maps.model.BitmapDescriptorFactory.fromPath(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.BitmapDescriptorFactory::fromAsset", (args, methodResult) -> {
                // args
                // jsonable arg
                String var0 = (String) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.BitmapDescriptorFactory::fromAsset(" + var0 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.BitmapDescriptor result;
                try {
                    result = com.amap.api.maps.model.BitmapDescriptorFactory.fromAsset(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.BitmapDescriptorFactory::fromFile", (args, methodResult) -> {
                // args
                // jsonable arg
                String var0 = (String) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.BitmapDescriptorFactory::fromFile(" + var0 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.BitmapDescriptor result;
                try {
                    result = com.amap.api.maps.model.BitmapDescriptorFactory.fromFile(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.BitmapDescriptorFactory::defaultMarker", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.BitmapDescriptorFactory::defaultMarker(" + "" + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.BitmapDescriptor result;
                try {
                    result = com.amap.api.maps.model.BitmapDescriptorFactory.defaultMarker();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.BitmapDescriptorFactory::defaultMarker__double", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var0 = (Double) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.BitmapDescriptorFactory::defaultMarker(" + var0 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.BitmapDescriptor result;
                try {
                    result = com.amap.api.maps.model.BitmapDescriptorFactory.defaultMarker(new Double(var0).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.BitmapDescriptorFactory::fromBitmap", (args, methodResult) -> {
                // args
                // ref arg
                android.graphics.Bitmap var0 = (android.graphics.Bitmap) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.BitmapDescriptorFactory::fromBitmap(" + var0 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.BitmapDescriptor result;
                try {
                    result = com.amap.api.maps.model.BitmapDescriptorFactory.fromBitmap(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.BitmapDescriptorFactory::getContext", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.BitmapDescriptorFactory::getContext(" + "" + ")");
                }
            
                // invoke native method
                android.content.Context result;
                try {
                    result = com.amap.api.maps.model.BitmapDescriptorFactory.getContext();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MultiPointOverlayOptions::anchor", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MultiPointOverlayOptions ref = (com.amap.api.maps.model.MultiPointOverlayOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MultiPointOverlayOptions@" + refId + "::anchor(" + var1 + var2 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.MultiPointOverlayOptions result;
                try {
                    result = ref.anchor(new Double(var1).floatValue(), new Double(var2).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MultiPointOverlayOptions::getAnchorU", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MultiPointOverlayOptions ref = (com.amap.api.maps.model.MultiPointOverlayOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MultiPointOverlayOptions@" + refId + "::getAnchorU(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getAnchorU();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MultiPointOverlayOptions::getAnchorV", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MultiPointOverlayOptions ref = (com.amap.api.maps.model.MultiPointOverlayOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MultiPointOverlayOptions@" + refId + "::getAnchorV(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getAnchorV();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MultiPointOverlayOptions::icon", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.BitmapDescriptor var1 = (com.amap.api.maps.model.BitmapDescriptor) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MultiPointOverlayOptions ref = (com.amap.api.maps.model.MultiPointOverlayOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MultiPointOverlayOptions@" + refId + "::icon(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.MultiPointOverlayOptions result;
                try {
                    result = ref.icon(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.MultiPointOverlayOptions::getIcon", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.MultiPointOverlayOptions ref = (com.amap.api.maps.model.MultiPointOverlayOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.MultiPointOverlayOptions@" + refId + "::getIcon(" + "" + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.BitmapDescriptor result;
                try {
                    result = ref.getIcon();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::setUseTexture", (args, methodResult) -> {
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::setUseTexture(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.setUseTexture(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::setCustomTexture", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.BitmapDescriptor var1 = (com.amap.api.maps.model.BitmapDescriptor) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::setCustomTexture(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.setCustomTexture(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::getCustomTexture", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::getCustomTexture(" + "" + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.BitmapDescriptor result;
                try {
                    result = ref.getCustomTexture();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::setCustomTextureList", (args, methodResult) -> {
                // args
                // list arg
                List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var1");
                java.util.List<com.amap.api.maps.model.BitmapDescriptor> var1 = new ArrayList<>();
                for (int refId : var1RefIdList) {
                    ((ArrayList<com.amap.api.maps.model.BitmapDescriptor>) var1).add((com.amap.api.maps.model.BitmapDescriptor) getHEAP().get(refId));
                }
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::setCustomTextureList(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.setCustomTextureList((ArrayList) var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::getCustomTextureList", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::getCustomTextureList(" + "" + ")");
                }
            
                // invoke native method
                java.util.List<com.amap.api.maps.model.BitmapDescriptor> result;
                try {
                    result = ref.getCustomTextureList();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (result != null) {
                    jsonableResult = new ArrayList<>();
                    for (com.amap.api.maps.model.BitmapDescriptor item : result) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::setCustomTextureIndex", (args, methodResult) -> {
                // args
                // jsonable arg
                java.util.List<Integer> var1 = (java.util.List<Integer>) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::setCustomTextureIndex(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.setCustomTextureIndex((ArrayList) var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::getCustomTextureIndex", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::getCustomTextureIndex(" + "" + ")");
                }
            
                // invoke native method
                java.util.List<Integer> result;
                try {
                    result = ref.getCustomTextureIndex();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                java.util.List<Integer> jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::colorValues", (args, methodResult) -> {
                // args
                // jsonable arg
                java.util.List<Integer> var1 = (java.util.List<Integer>) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::colorValues(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.colorValues((ArrayList) var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::getColorValues", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::getColorValues(" + "" + ")");
                }
            
                // invoke native method
                java.util.List<Integer> result;
                try {
                    result = ref.getColorValues();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                java.util.List<Integer> jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::useGradient", (args, methodResult) -> {
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::useGradient(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.useGradient(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::isUseGradient", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::isUseGradient(" + "" + ")");
                }
            
                // invoke native method
                boolean result;
                try {
                    result = ref.isUseGradient();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::isUseTexture", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::isUseTexture(" + "" + ")");
                }
            
                // invoke native method
                boolean result;
                try {
                    result = ref.isUseTexture();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::isGeodesic", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::isGeodesic(" + "" + ")");
                }
            
                // invoke native method
                boolean result;
                try {
                    result = ref.isGeodesic();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::add__com_amap_api_maps_model_LatLng", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::add(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.add(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::addAll", (args, methodResult) -> {
                // args
                // list arg
                List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var1");
                java.lang.Iterable<com.amap.api.maps.model.LatLng> var1 = new ArrayList<>();
                for (int refId : var1RefIdList) {
                    ((ArrayList<com.amap.api.maps.model.LatLng>) var1).add((com.amap.api.maps.model.LatLng) getHEAP().get(refId));
                }
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::addAll(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.addAll((ArrayList) var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::width", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::width(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.width(new Double(var1).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::color", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::color(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.color(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::zIndex", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::zIndex(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.zIndex(new Double(var1).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::visible", (args, methodResult) -> {
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::visible(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.visible(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::geodesic", (args, methodResult) -> {
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::geodesic(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.geodesic(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::setDottedLine", (args, methodResult) -> {
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::setDottedLine(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.setDottedLine(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::isDottedLine", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::isDottedLine(" + "" + ")");
                }
            
                // invoke native method
                boolean result;
                try {
                    result = ref.isDottedLine();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::setDottedLineType", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::setDottedLineType(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.setDottedLineType(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::lineCapType", (args, methodResult) -> {
                // args
                // enum arg
                com.amap.api.maps.model.PolylineOptions.LineCapType var1 = com.amap.api.maps.model.PolylineOptions.LineCapType.values()[(int) ((Map<String, Object>) args).get("var1")];
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::lineCapType(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.lineCapType(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::lineJoinType", (args, methodResult) -> {
                // args
                // enum arg
                com.amap.api.maps.model.PolylineOptions.LineJoinType var1 = com.amap.api.maps.model.PolylineOptions.LineJoinType.values()[(int) ((Map<String, Object>) args).get("var1")];
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::lineJoinType(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.lineJoinType(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::getLineCapType", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::getLineCapType(" + "" + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions.LineCapType result;
                try {
                    result = ref.getLineCapType();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::getLineJoinType", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::getLineJoinType(" + "" + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions.LineJoinType result;
                try {
                    result = ref.getLineJoinType();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::getDottedLineType", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::getDottedLineType(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getDottedLineType();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::getPoints", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::getPoints(" + "" + ")");
                }
            
                // invoke native method
                java.util.List<com.amap.api.maps.model.LatLng> result;
                try {
                    result = ref.getPoints();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (result != null) {
                    jsonableResult = new ArrayList<>();
                    for (com.amap.api.maps.model.LatLng item : result) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::getWidth", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::getWidth(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getWidth();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::getColor", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::getColor(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getColor();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::getZIndex", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::getZIndex(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getZIndex();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::isVisible", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::isVisible(" + "" + ")");
                }
            
                // invoke native method
                boolean result;
                try {
                    result = ref.isVisible();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::transparency", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::transparency(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.transparency(new Double(var1).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::getTransparency", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::getTransparency(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getTransparency();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::aboveMaskLayer", (args, methodResult) -> {
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::aboveMaskLayer(" + var1 + ")");
                }
            
                // invoke native method
                com.amap.api.maps.model.PolylineOptions result;
                try {
                    result = ref.aboveMaskLayer(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = System.identityHashCode(result);
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.maps.model.PolylineOptions::isAboveMaskLayer", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.PolylineOptions ref = (com.amap.api.maps.model.PolylineOptions) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.maps.model.PolylineOptions@" + refId + "::isAboveMaskLayer(" + "" + ")");
                }
            
                // invoke native method
                boolean result;
                try {
                    result = ref.isAboveMaskLayer();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
        }};
    }
}
