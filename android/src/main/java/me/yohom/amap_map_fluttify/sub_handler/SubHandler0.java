//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.amap_map_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import me.yohom.amap_map_fluttify.AmapMapFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler0 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // getter
            put("com.autonavi.ae.gmap.maploader.ProcessingTile::get_mKeyName", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.maploader.ProcessingTile ref = (com.autonavi.ae.gmap.maploader.ProcessingTile) getHEAP().get(refId);
            
                String result = ref.mKeyName;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.maploader.ProcessingTile::get_mCreateTime", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.maploader.ProcessingTile ref = (com.autonavi.ae.gmap.maploader.ProcessingTile) getHEAP().get(refId);
            
                long result = ref.mCreateTime;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_name", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                String result = ref.name;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_poiid", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                String result = ref.poiid;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_x", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.x;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_y", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.y;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_angle", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.angle;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_strWidth", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.strWidth;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_strHeight", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.strHeight;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_iconID", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.iconID;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_labelx", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.labelx;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_labely", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.labely;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_pixel20X", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.pixel20X;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_pixel20Y", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.pixel20Y;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_pixel20Z", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.pixel20Z;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_fontColor", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.fontColor;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_borderColor", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.borderColor;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_type", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.type;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_anchor", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.anchor;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_fontSize", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.fontSize;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_mSublayerId", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.mSublayerId;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_mIsFouces", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                boolean result = ref.mIsFouces;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::get_timeStamp", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                int result = ref.timeStamp;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup::get_needMove", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup ref = (com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup) getHEAP().get(refId);
            
                boolean result = ref.needMove;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::get_fromXValue", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V ref = (com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V) getHEAP().get(refId);
            
                double result = ref.fromXValue;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::get_toXValue", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V ref = (com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V) getHEAP().get(refId);
            
                double result = ref.toXValue;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::get_fromYValue", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V ref = (com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V) getHEAP().get(refId);
            
                double result = ref.fromYValue;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::get_toYValue", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V ref = (com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V) getHEAP().get(refId);
            
                double result = ref.toYValue;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.style.StyleItem::get_mainKey", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.style.StyleItem ref = (com.autonavi.ae.gmap.style.StyleItem) getHEAP().get(refId);
            
                int result = ref.mainKey;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.style.StyleItem::get_subKey", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.style.StyleItem ref = (com.autonavi.ae.gmap.style.StyleItem) getHEAP().get(refId);
            
                int[] result = ref.subKey;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.style.StyleElement::get_styleElementType", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.style.StyleElement ref = (com.autonavi.ae.gmap.style.StyleElement) getHEAP().get(refId);
            
                int result = ref.styleElementType;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.style.StyleElement::get_value", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.style.StyleElement ref = (com.autonavi.ae.gmap.style.StyleElement) getHEAP().get(refId);
            
                int result = ref.value;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.style.StyleElement::get_textureId", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.style.StyleElement ref = (com.autonavi.ae.gmap.style.StyleElement) getHEAP().get(refId);
            
                int result = ref.textureId;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.style.StyleElement::get_opacity", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.style.StyleElement ref = (com.autonavi.ae.gmap.style.StyleElement) getHEAP().get(refId);
            
                float result = ref.opacity;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.style.StyleElement::get_lineWidth", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.style.StyleElement ref = (com.autonavi.ae.gmap.style.StyleElement) getHEAP().get(refId);
            
                int result = ref.lineWidth;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.style.StyleElement::get_visible", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.style.StyleElement ref = (com.autonavi.ae.gmap.style.StyleElement) getHEAP().get(refId);
            
                int result = ref.visible;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_engineId", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                int result = ref.engineId;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_x", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                int result = ref.x;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_y", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                int result = ref.y;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_width", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                int result = ref.width;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_height", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                int result = ref.height;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_screenWidth", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                int result = ref.screenWidth;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_screenHeight", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                int result = ref.screenHeight;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_screenScale", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                float result = ref.screenScale;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_textScale", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                float result = ref.textScale;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::get_mapZoomScale", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                float result = ref.mapZoomScale;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::get_mGestureState", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo ref = (com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo) getHEAP().get(refId);
            
                int result = ref.mGestureState;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::get_mGestureType", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo ref = (com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo) getHEAP().get(refId);
            
                int result = ref.mGestureType;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::get_mLocation", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo ref = (com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo) getHEAP().get(refId);
            
                float[] result = ref.mLocation;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::get_mScale", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo ref = (com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo) getHEAP().get(refId);
            
                float result = ref.mScale;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::get_mRotation", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo ref = (com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo) getHEAP().get(refId);
            
                float result = ref.mRotation;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::get_mVeLocityFloat", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo ref = (com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo) getHEAP().get(refId);
            
                float result = ref.mVeLocityFloat;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::get_mVelocityPoint", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo ref = (com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo) getHEAP().get(refId);
            
                float[] result = ref.mVelocityPoint;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLTextureProperty::get_mId", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty ref = (com.autonavi.ae.gmap.gloverlay.GLTextureProperty) getHEAP().get(refId);
            
                int result = ref.mId;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLTextureProperty::get_mBitmap", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty ref = (com.autonavi.ae.gmap.gloverlay.GLTextureProperty) getHEAP().get(refId);
            
                android.graphics.Bitmap result = ref.mBitmap;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLTextureProperty::get_mPngBuffer", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty ref = (com.autonavi.ae.gmap.gloverlay.GLTextureProperty) getHEAP().get(refId);
            
                byte[] result = ref.mPngBuffer;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLTextureProperty::get_mAnchor", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty ref = (com.autonavi.ae.gmap.gloverlay.GLTextureProperty) getHEAP().get(refId);
            
                int result = ref.mAnchor;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLTextureProperty::get_mXRatio", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty ref = (com.autonavi.ae.gmap.gloverlay.GLTextureProperty) getHEAP().get(refId);
            
                float result = ref.mXRatio;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLTextureProperty::get_mYRatio", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty ref = (com.autonavi.ae.gmap.gloverlay.GLTextureProperty) getHEAP().get(refId);
            
                float result = ref.mYRatio;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLTextureProperty::get_isGenMimps", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty ref = (com.autonavi.ae.gmap.gloverlay.GLTextureProperty) getHEAP().get(refId);
            
                boolean result = ref.isGenMimps;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLTextureProperty::get_isRepeat", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty ref = (com.autonavi.ae.gmap.gloverlay.GLTextureProperty) getHEAP().get(refId);
            
                boolean result = ref.isRepeat;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits::get_mOverlayHashCode", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits) getHEAP().get(refId);
            
                long result = ref.mOverlayHashCode;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits::get_mHitedIndex", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits) getHEAP().get(refId);
            
                long result = ref.mHitedIndex;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits::get_mHitedTimes", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits) getHEAP().get(refId);
            
                long result = ref.mHitedTimes;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::get_stAreaColor", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr) getHEAP().get(refId);
            
                int result = ref.stAreaColor;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::get_stArrowBorderColor", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr) getHEAP().get(refId);
            
                int result = ref.stArrowBorderColor;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::get_fArrowBorderWidth", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr) getHEAP().get(refId);
            
                int result = ref.fArrowBorderWidth;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::get_fArrowLineWidth", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr) getHEAP().get(refId);
            
                int result = ref.fArrowLineWidth;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::get_stArrowLineColor", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr) getHEAP().get(refId);
            
                int result = ref.stArrowLineColor;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::get_dayMode", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr) getHEAP().get(refId);
            
                boolean result = ref.dayMode;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_euRouteTexture", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty.EAMapRouteTexture result = ref.euRouteTexture;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mFilledResId", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                int result = ref.mFilledResId;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mSimple3DFillResId", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                int result = ref.mSimple3DFillResId;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mFilledColor", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                int result = ref.mFilledColor;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mBgResId", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                int result = ref.mBgResId;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mBgColor", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                int result = ref.mBgColor;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mLineWidth", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                int result = ref.mLineWidth;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mBorderLineWidth", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                int result = ref.mBorderLineWidth;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mX1", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                float result = ref.mX1;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mY1", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                float result = ref.mY1;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mX2", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                float result = ref.mX2;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mY2", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                float result = ref.mY2;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mGLStart", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                float result = ref.mGLStart;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mTextureLen", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                float result = ref.mTextureLen;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mSimple3DX1", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                float result = ref.mSimple3DX1;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mSimple3DY1", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                float result = ref.mSimple3DY1;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mSimple3DX2", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                float result = ref.mSimple3DX2;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mSimple3DY2", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                float result = ref.mSimple3DY2;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mSimple3DGLStart", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                float result = ref.mSimple3DGLStart;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mSimple3DTextureLen", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                float result = ref.mSimple3DTextureLen;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mCapX1", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                float result = ref.mCapX1;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mCapY1", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                float result = ref.mCapY1;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mCapX2", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                float result = ref.mCapX2;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mCapY2", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                float result = ref.mCapY2;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_isLineExtract", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                boolean result = ref.isLineExtract;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_isCanCovered", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                boolean result = ref.isCanCovered;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_isUseColor", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                boolean result = ref.isUseColor;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_isUseCap", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                boolean result = ref.isUseCap;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mShowArrow", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                boolean result = ref.mShowArrow;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::get_mbTexPreMulAlpha", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                boolean result = ref.mbTexPreMulAlpha;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::get_mResId", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayTexture) getHEAP().get(refId);
            
                int result = ref.mResId;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::get_mWidth", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayTexture) getHEAP().get(refId);
            
                int result = ref.mWidth;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::get_mHeight", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayTexture) getHEAP().get(refId);
            
                int result = ref.mHeight;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::get_mResWidth", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayTexture) getHEAP().get(refId);
            
                int result = ref.mResWidth;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::get_mResHeight", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayTexture) getHEAP().get(refId);
            
                int result = ref.mResHeight;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::get_mAnchorXRatio", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayTexture) getHEAP().get(refId);
            
                float result = ref.mAnchorXRatio;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::get_mAnchorYRatio", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayTexture) getHEAP().get(refId);
            
                float result = ref.mAnchorYRatio;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::get_mAnchor", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayTexture) getHEAP().get(refId);
            
                int result = ref.mAnchor;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.GLMapEngine.InitParam::get_mRootPath", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.InitParam ref = (com.autonavi.ae.gmap.GLMapEngine.InitParam) getHEAP().get(refId);
            
                String result = ref.mRootPath;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.GLMapEngine.InitParam::get_mConfigPath", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.InitParam ref = (com.autonavi.ae.gmap.GLMapEngine.InitParam) getHEAP().get(refId);
            
                String result = ref.mConfigPath;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.GLMapEngine.InitParam::get_mConfigContent", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.InitParam ref = (com.autonavi.ae.gmap.GLMapEngine.InitParam) getHEAP().get(refId);
            
                String result = ref.mConfigContent;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.GLMapEngine.InitParam::get_mOfflineDataPath", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.InitParam ref = (com.autonavi.ae.gmap.GLMapEngine.InitParam) getHEAP().get(refId);
            
                String result = ref.mOfflineDataPath;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.ae.gmap.GLMapEngine.InitParam::get_mP3dCrossPath", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.InitParam ref = (com.autonavi.ae.gmap.GLMapEngine.InitParam) getHEAP().get(refId);
            
                String result = ref.mP3dCrossPath;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::get_requestUrl", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam) getHEAP().get(refId);
            
                String result = ref.requestUrl;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::get_handler", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam) getHEAP().get(refId);
            
                long result = ref.handler;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::get_nRequestType", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam) getHEAP().get(refId);
            
                int result = ref.nRequestType;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::get_enCodeString", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam) getHEAP().get(refId);
            
                byte[] result = ref.enCodeString;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::get_nCompress", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam) getHEAP().get(refId);
            
                int result = ref.nCompress;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::get_requestBaseUrl", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam) getHEAP().get(refId);
            
                String result = ref.requestBaseUrl;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.maploader.AMapLoader::get_isFinish", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.maploader.AMapLoader ref = (com.autonavi.amap.mapcore.maploader.AMapLoader) getHEAP().get(refId);
            
                boolean result = ref.isFinish;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AeUtil.UnZipFileBrake::get_mIsAborted", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AeUtil.UnZipFileBrake ref = (com.autonavi.amap.mapcore.AeUtil.UnZipFileBrake) getHEAP().get(refId);
            
                boolean result = ref.mIsAborted;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.DPoint::get_x", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.DPoint ref = (com.autonavi.amap.mapcore.DPoint) getHEAP().get(refId);
            
                double result = ref.x;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.DPoint::get_y", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.DPoint ref = (com.autonavi.amap.mapcore.DPoint) getHEAP().get(refId);
            
                double result = ref.y;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.animation.GLTranslateAnimation::get_mFromXDelta", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.animation.GLTranslateAnimation ref = (com.autonavi.amap.mapcore.animation.GLTranslateAnimation) getHEAP().get(refId);
            
                double result = ref.mFromXDelta;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.animation.GLTranslateAnimation::get_mFromYDelta", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.animation.GLTranslateAnimation ref = (com.autonavi.amap.mapcore.animation.GLTranslateAnimation) getHEAP().get(refId);
            
                double result = ref.mFromYDelta;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.animation.GLTranslateAnimation::get_mToXDelta", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.animation.GLTranslateAnimation ref = (com.autonavi.amap.mapcore.animation.GLTranslateAnimation) getHEAP().get(refId);
            
                double result = ref.mToXDelta;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.animation.GLTranslateAnimation::get_mToYDelta", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.animation.GLTranslateAnimation ref = (com.autonavi.amap.mapcore.animation.GLTranslateAnimation) getHEAP().get(refId);
            
                double result = ref.mToYDelta;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.animation.GLTranslateAnimation::get_mCurXDelta", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.animation.GLTranslateAnimation ref = (com.autonavi.amap.mapcore.animation.GLTranslateAnimation) getHEAP().get(refId);
            
                double result = ref.mCurXDelta;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.animation.GLTranslateAnimation::get_mCurYDelta", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.animation.GLTranslateAnimation ref = (com.autonavi.amap.mapcore.animation.GLTranslateAnimation) getHEAP().get(refId);
            
                double result = ref.mCurYDelta;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.animation.GLAlphaAnimation::get_mFromAlpha", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.animation.GLAlphaAnimation ref = (com.autonavi.amap.mapcore.animation.GLAlphaAnimation) getHEAP().get(refId);
            
                float result = ref.mFromAlpha;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.animation.GLAlphaAnimation::get_mToAlpha", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.animation.GLAlphaAnimation ref = (com.autonavi.amap.mapcore.animation.GLAlphaAnimation) getHEAP().get(refId);
            
                float result = ref.mToAlpha;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.animation.GLAlphaAnimation::get_mCurAlpha", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.animation.GLAlphaAnimation ref = (com.autonavi.amap.mapcore.animation.GLAlphaAnimation) getHEAP().get(refId);
            
                float result = ref.mCurAlpha;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.animation.GLTransformation::get_x", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.animation.GLTransformation ref = (com.autonavi.amap.mapcore.animation.GLTransformation) getHEAP().get(refId);
            
                double result = ref.x;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.animation.GLTransformation::get_y", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.animation.GLTransformation ref = (com.autonavi.amap.mapcore.animation.GLTransformation) getHEAP().get(refId);
            
                double result = ref.y;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.animation.GLTransformation::get_alpha", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.animation.GLTransformation ref = (com.autonavi.amap.mapcore.animation.GLTransformation) getHEAP().get(refId);
            
                double result = ref.alpha;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.animation.GLTransformation::get_rotate", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.animation.GLTransformation ref = (com.autonavi.amap.mapcore.animation.GLTransformation) getHEAP().get(refId);
            
                double result = ref.rotate;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.animation.GLTransformation::get_scaleX", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.animation.GLTransformation ref = (com.autonavi.amap.mapcore.animation.GLTransformation) getHEAP().get(refId);
            
                double result = ref.scaleX;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.animation.GLTransformation::get_scaleY", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.animation.GLTransformation ref = (com.autonavi.amap.mapcore.animation.GLTransformation) getHEAP().get(refId);
            
                double result = ref.scaleY;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.animation.GLEmergeAnimation::get_mStartPoint", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.animation.GLEmergeAnimation ref = (com.autonavi.amap.mapcore.animation.GLEmergeAnimation) getHEAP().get(refId);
            
                com.amap.api.maps.model.LatLng result = ref.mStartPoint;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.autonavi.amap.mapcore.MapConfig::get_maxZoomLevel", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.MapConfig ref = (com.autonavi.amap.mapcore.MapConfig) getHEAP().get(refId);
            
                float result = ref.maxZoomLevel;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.MapConfig::get_minZoomLevel", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.MapConfig ref = (com.autonavi.amap.mapcore.MapConfig) getHEAP().get(refId);
            
                float result = ref.minZoomLevel;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.message.HoverGestureMapMessage::get_angleDelta", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.message.HoverGestureMapMessage ref = (com.autonavi.amap.mapcore.message.HoverGestureMapMessage) getHEAP().get(refId);
            
                float result = ref.angleDelta;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.message.MoveGestureMapMessage::get_touchDeltaX", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.message.MoveGestureMapMessage ref = (com.autonavi.amap.mapcore.message.MoveGestureMapMessage) getHEAP().get(refId);
            
                float result = ref.touchDeltaX;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.message.MoveGestureMapMessage::get_touchDeltaY", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.message.MoveGestureMapMessage ref = (com.autonavi.amap.mapcore.message.MoveGestureMapMessage) getHEAP().get(refId);
            
                float result = ref.touchDeltaY;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::get_scaleDelta", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.message.ScaleGestureMapMessage ref = (com.autonavi.amap.mapcore.message.ScaleGestureMapMessage) getHEAP().get(refId);
            
                float result = ref.scaleDelta;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::get_pivotX", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.message.ScaleGestureMapMessage ref = (com.autonavi.amap.mapcore.message.ScaleGestureMapMessage) getHEAP().get(refId);
            
                int result = ref.pivotX;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::get_pivotY", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.message.ScaleGestureMapMessage ref = (com.autonavi.amap.mapcore.message.ScaleGestureMapMessage) getHEAP().get(refId);
            
                int result = ref.pivotY;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::get_width", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.message.AbstractGestureMapMessage ref = (com.autonavi.amap.mapcore.message.AbstractGestureMapMessage) getHEAP().get(refId);
            
                int result = ref.width;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::get_height", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.message.AbstractGestureMapMessage ref = (com.autonavi.amap.mapcore.message.AbstractGestureMapMessage) getHEAP().get(refId);
            
                int result = ref.height;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::get_isGestureScaleByMapCenter", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.message.AbstractGestureMapMessage ref = (com.autonavi.amap.mapcore.message.AbstractGestureMapMessage) getHEAP().get(refId);
            
                boolean result = ref.isGestureScaleByMapCenter;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::get_isUseAnchor", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.message.AbstractGestureMapMessage ref = (com.autonavi.amap.mapcore.message.AbstractGestureMapMessage) getHEAP().get(refId);
            
                boolean result = ref.isUseAnchor;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::get_anchorX", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.message.AbstractGestureMapMessage ref = (com.autonavi.amap.mapcore.message.AbstractGestureMapMessage) getHEAP().get(refId);
            
                int result = ref.anchorX;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::get_anchorY", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.message.AbstractGestureMapMessage ref = (com.autonavi.amap.mapcore.message.AbstractGestureMapMessage) getHEAP().get(refId);
            
                int result = ref.anchorY;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.message.RotateGestureMapMessage::get_pivotX", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.message.RotateGestureMapMessage ref = (com.autonavi.amap.mapcore.message.RotateGestureMapMessage) getHEAP().get(refId);
            
                int result = ref.pivotX;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.message.RotateGestureMapMessage::get_pivotY", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.message.RotateGestureMapMessage ref = (com.autonavi.amap.mapcore.message.RotateGestureMapMessage) getHEAP().get(refId);
            
                int result = ref.pivotY;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.message.RotateGestureMapMessage::get_angleDelta", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.message.RotateGestureMapMessage ref = (com.autonavi.amap.mapcore.message.RotateGestureMapMessage) getHEAP().get(refId);
            
                float result = ref.angleDelta;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.FPointBounds::get_southwest", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.FPointBounds ref = (com.autonavi.amap.mapcore.FPointBounds) getHEAP().get(refId);
            
                com.autonavi.amap.mapcore.FPoint result = ref.southwest;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.autonavi.amap.mapcore.FPointBounds::get_northeast", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.FPointBounds ref = (com.autonavi.amap.mapcore.FPointBounds) getHEAP().get(refId);
            
                com.autonavi.amap.mapcore.FPoint result = ref.northeast;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.autonavi.amap.mapcore.Rectangle::get_left", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.Rectangle ref = (com.autonavi.amap.mapcore.Rectangle) getHEAP().get(refId);
            
                float result = ref.left;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.Rectangle::get_right", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.Rectangle ref = (com.autonavi.amap.mapcore.Rectangle) getHEAP().get(refId);
            
                float result = ref.right;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.Rectangle::get_bottom", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.Rectangle ref = (com.autonavi.amap.mapcore.Rectangle) getHEAP().get(refId);
            
                float result = ref.bottom;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.Rectangle::get_top", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.Rectangle ref = (com.autonavi.amap.mapcore.Rectangle) getHEAP().get(refId);
            
                float result = ref.top;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.FPoint3::get_colorIndex", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.FPoint3 ref = (com.autonavi.amap.mapcore.FPoint3) getHEAP().get(refId);
            
                int result = ref.colorIndex;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_nowType", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage.Type result = ref.nowType;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_xPixel", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                float result = ref.xPixel;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_yPixel", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                float result = ref.yPixel;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_amount", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                float result = ref.amount;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_cameraPosition", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                com.amap.api.maps.model.CameraPosition result = ref.cameraPosition;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_bounds", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                com.amap.api.maps.model.LatLngBounds result = ref.bounds;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_focus", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                android.graphics.Point result = ref.focus;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_zoom", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                float result = ref.zoom;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_tilt", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                float result = ref.tilt;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_bearing", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                float result = ref.bearing;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_geoPoint", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                android.graphics.Point result = ref.geoPoint;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_isUseAnchor", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                boolean result = ref.isUseAnchor;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_anchorX", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                int result = ref.anchorX;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_anchorY", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                int result = ref.anchorY;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_isChangeFinished", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                boolean result = ref.isChangeFinished;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_mapConfig", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                com.autonavi.amap.mapcore.MapConfig result = ref.mapConfig;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_paddingLeft", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                int result = ref.paddingLeft;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_paddingRight", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                int result = ref.paddingRight;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_paddingTop", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                int result = ref.paddingTop;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_paddingBottom", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                int result = ref.paddingBottom;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_mDuration", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                long result = ref.mDuration;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_width", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                int result = ref.width;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_height", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                int result = ref.height;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.amap.api.maps.model.VisibleRegion::get_nearLeft", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.VisibleRegion ref = (com.amap.api.maps.model.VisibleRegion) getHEAP().get(refId);
            
                com.amap.api.maps.model.LatLng result = ref.nearLeft;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.amap.api.maps.model.VisibleRegion::get_nearRight", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.VisibleRegion ref = (com.amap.api.maps.model.VisibleRegion) getHEAP().get(refId);
            
                com.amap.api.maps.model.LatLng result = ref.nearRight;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.amap.api.maps.model.VisibleRegion::get_farLeft", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.VisibleRegion ref = (com.amap.api.maps.model.VisibleRegion) getHEAP().get(refId);
            
                com.amap.api.maps.model.LatLng result = ref.farLeft;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.amap.api.maps.model.VisibleRegion::get_farRight", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.VisibleRegion ref = (com.amap.api.maps.model.VisibleRegion) getHEAP().get(refId);
            
                com.amap.api.maps.model.LatLng result = ref.farRight;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.amap.api.maps.model.VisibleRegion::get_latLngBounds", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.VisibleRegion ref = (com.amap.api.maps.model.VisibleRegion) getHEAP().get(refId);
            
                com.amap.api.maps.model.LatLngBounds result = ref.latLngBounds;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.amap.api.maps.model.Tile::get_width", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Tile ref = (com.amap.api.maps.model.Tile) getHEAP().get(refId);
            
                int result = ref.width;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.amap.api.maps.model.Tile::get_height", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Tile ref = (com.amap.api.maps.model.Tile) getHEAP().get(refId);
            
                int result = ref.height;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.amap.api.maps.model.Tile::get_data", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.Tile ref = (com.amap.api.maps.model.Tile) getHEAP().get(refId);
            
                byte[] result = ref.data;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.amap.api.maps.model.CameraPosition::get_target", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.CameraPosition ref = (com.amap.api.maps.model.CameraPosition) getHEAP().get(refId);
            
                com.amap.api.maps.model.LatLng result = ref.target;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
            // getter
            put("com.amap.api.maps.model.CameraPosition::get_zoom", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.CameraPosition ref = (com.amap.api.maps.model.CameraPosition) getHEAP().get(refId);
            
                float result = ref.zoom;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.amap.api.maps.model.CameraPosition::get_tilt", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.CameraPosition ref = (com.amap.api.maps.model.CameraPosition) getHEAP().get(refId);
            
                float result = ref.tilt;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.amap.api.maps.model.CameraPosition::get_bearing", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.CameraPosition ref = (com.amap.api.maps.model.CameraPosition) getHEAP().get(refId);
            
                float result = ref.bearing;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.amap.api.maps.model.CameraPosition::get_isAbroad", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.CameraPosition ref = (com.amap.api.maps.model.CameraPosition) getHEAP().get(refId);
            
                boolean result = ref.isAbroad;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.amap.api.maps.model.animation.Animation::get_glAnimation", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.maps.model.animation.Animation ref = (com.amap.api.maps.model.animation.Animation) getHEAP().get(refId);
            
                com.autonavi.amap.mapcore.animation.GLAnimation result = ref.glAnimation;
            
                getHEAP().put(result.hashCode(), result);
            
                methodResult.success(result.hashCode());
            });
        }};
    }
}
