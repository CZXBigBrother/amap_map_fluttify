//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.amap_map_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import me.yohom.amap_map_fluttify.AmapMapFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler25 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_Rectangle__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_Rectangle__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.Rectangle obj = new com.autonavi.amap.mapcore.Rectangle();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_Rectangle__float__float__float__float", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_Rectangle__float__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) args).get("var4");
            
                // create target object
                com.autonavi.amap.mapcore.Rectangle obj = new com.autonavi.amap.mapcore.Rectangle(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue());
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_Inner_3dMap_location__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_Inner_3dMap_location__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // create target object
                com.autonavi.amap.mapcore.Inner_3dMap_location obj = new com.autonavi.amap.mapcore.Inner_3dMap_location(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_Inner_3dMap_location__android_location_Location", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_Inner_3dMap_location__android_location_Location");
                }
            
                // args
                // ref arg
                android.location.Location var1 = (android.location.Location) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.autonavi.amap.mapcore.Inner_3dMap_location obj = new com.autonavi.amap.mapcore.Inner_3dMap_location(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_AMapEngineUtils__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_AMapEngineUtils__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.AMapEngineUtils obj = new com.autonavi.amap.mapcore.AMapEngineUtils();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_FPoint3__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_FPoint3__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.FPoint3 obj = new com.autonavi.amap.mapcore.FPoint3();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_FPoint3__float__float__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_FPoint3__float__float__int");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.autonavi.amap.mapcore.FPoint3 obj = new com.autonavi.amap.mapcore.FPoint3(new Double(var1).floatValue(), new Double(var2).floatValue(), var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_AMapEtaDecoder__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_AMapEtaDecoder__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.AMapEtaDecoder obj = new com.autonavi.amap.mapcore.AMapEtaDecoder();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_FPointBounds_Builder__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_FPointBounds_Builder__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.FPointBounds.Builder obj = new com.autonavi.amap.mapcore.FPointBounds.Builder();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_Inner_3dMap_locationOption__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_Inner_3dMap_locationOption__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.Inner_3dMap_locationOption obj = new com.autonavi.amap.mapcore.Inner_3dMap_locationOption();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_FPoint__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_FPoint__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.FPoint obj = new com.autonavi.amap.mapcore.FPoint();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_FPoint__float__float", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_FPoint__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.autonavi.amap.mapcore.FPoint obj = new com.autonavi.amap.mapcore.FPoint(new Double(var1).floatValue(), new Double(var2).floatValue());
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_AMapNativeParticleSystem__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_AMapNativeParticleSystem__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.AMapNativeParticleSystem obj = new com.autonavi.amap.mapcore.AMapNativeParticleSystem();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_AMapNativeBuildingRenderer__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_AMapNativeBuildingRenderer__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.AMapNativeBuildingRenderer obj = new com.autonavi.amap.mapcore.AMapNativeBuildingRenderer();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_Convert__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_Convert__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.Convert obj = new com.autonavi.amap.mapcore.Convert();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_offlineservice_AMapPermissionActivity__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_offlineservice_AMapPermissionActivity__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.offlineservice.AMapPermissionActivity obj = new com.amap.api.offlineservice.AMapPermissionActivity();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_InfoWindowParams__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_InfoWindowParams__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.InfoWindowParams obj = new com.amap.api.maps.InfoWindowParams();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_CameraUpdateFactory__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_CameraUpdateFactory__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.CameraUpdateFactory obj = new com.amap.api.maps.CameraUpdateFactory();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_AMapException__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_AMapException__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // create target object
                com.amap.api.maps.AMapException obj = new com.amap.api.maps.AMapException(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_AMapException__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_AMapException__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.AMapException obj = new com.amap.api.maps.AMapException();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_AMapOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_AMapOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.AMapOptions obj = new com.amap.api.maps.AMapOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_AMapOptionsCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_AMapOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.AMapOptionsCreator obj = new com.amap.api.maps.AMapOptionsCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_CoordinateConverter__android_content_Context", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_CoordinateConverter__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.maps.CoordinateConverter obj = new com.amap.api.maps.CoordinateConverter(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_utils_SpatialRelationUtil__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_utils_SpatialRelationUtil__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.utils.SpatialRelationUtil obj = new com.amap.api.maps.utils.SpatialRelationUtil();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_utils_overlay_MovingPointOverlay__com_amap_api_maps_AMap__com_amap_api_maps_model_BasePointOverlay", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_utils_overlay_MovingPointOverlay__com_amap_api_maps_AMap__com_amap_api_maps_model_BasePointOverlay");
                }
            
                // args
                // ref arg
                com.amap.api.maps.AMap var1 = (com.amap.api.maps.AMap) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.maps.model.BasePointOverlay var2 = (com.amap.api.maps.model.BasePointOverlay) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.maps.utils.overlay.MovingPointOverlay obj = new com.amap.api.maps.utils.overlay.MovingPointOverlay(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_utils_overlay_SmoothMoveMarker__com_amap_api_maps_AMap", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_utils_overlay_SmoothMoveMarker__com_amap_api_maps_AMap");
                }
            
                // args
                // ref arg
                com.amap.api.maps.AMap var1 = (com.amap.api.maps.AMap) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.maps.utils.overlay.SmoothMoveMarker obj = new com.amap.api.maps.utils.overlay.SmoothMoveMarker(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_SwipeDismissCallBack__com_amap_api_maps_SwipeDismissView", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_SwipeDismissCallBack__com_amap_api_maps_SwipeDismissView");
                }
            
                // args
                // ref arg
                com.amap.api.maps.SwipeDismissView var1 = (com.amap.api.maps.SwipeDismissView) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.maps.SwipeDismissCallBack obj = new com.amap.api.maps.SwipeDismissCallBack(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_SwipeDismissView__android_content_Context__android_view_View", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_SwipeDismissView__android_content_Context__android_view_View");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                android.view.View var2 = (android.view.View) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.maps.SwipeDismissView obj = new com.amap.api.maps.SwipeDismissView(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_MapsInitializer__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_MapsInitializer__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.MapsInitializer obj = new com.amap.api.maps.MapsInitializer();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_offlinemap_OfflineMapStatus__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_offlinemap_OfflineMapStatus__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.offlinemap.OfflineMapStatus obj = new com.amap.api.maps.offlinemap.OfflineMapStatus();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_offlinemap_OfflineMapProvince__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_offlinemap_OfflineMapProvince__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.offlinemap.OfflineMapProvince obj = new com.amap.api.maps.offlinemap.OfflineMapProvince();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_offlinemap_DownloadProgressView__android_content_Context", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_offlinemap_DownloadProgressView__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.maps.offlinemap.DownloadProgressView obj = new com.amap.api.maps.offlinemap.DownloadProgressView(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_offlinemap_Province__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_offlinemap_Province__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.offlinemap.Province obj = new com.amap.api.maps.offlinemap.Province();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_offlinemap_OfflineMapCity__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_offlinemap_OfflineMapCity__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.offlinemap.OfflineMapCity obj = new com.amap.api.maps.offlinemap.OfflineMapCity();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_offlinemap_OfflineMapActivity__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_offlinemap_OfflineMapActivity__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.offlinemap.OfflineMapActivity obj = new com.amap.api.maps.offlinemap.OfflineMapActivity();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_offlinemap_City__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_offlinemap_City__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.offlinemap.City obj = new com.amap.api.maps.offlinemap.City();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_PolygonHoleOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_PolygonHoleOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.PolygonHoleOptions obj = new com.amap.api.maps.model.PolygonHoleOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_TileOverlayOptionsCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_TileOverlayOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.TileOverlayOptionsCreator obj = new com.amap.api.maps.model.TileOverlayOptionsCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_Poi__String__com_amap_api_maps_model_LatLng__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_Poi__String__com_amap_api_maps_model_LatLng__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // ref arg
                com.amap.api.maps.model.LatLng var2 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.maps.model.Poi obj = new com.amap.api.maps.model.Poi(var1, var2, var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_MyLocationStyle__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_MyLocationStyle__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.MyLocationStyle obj = new com.amap.api.maps.model.MyLocationStyle();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_VisibleRegion__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLngBounds", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_VisibleRegion__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLngBounds");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.maps.model.LatLng var2 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
                // ref arg
                com.amap.api.maps.model.LatLng var3 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var3"));
                // ref arg
                com.amap.api.maps.model.LatLng var4 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var4"));
                // ref arg
                com.amap.api.maps.model.LatLngBounds var5 = (com.amap.api.maps.model.LatLngBounds) getHEAP().get((int) ((Map<String, Object>) args).get("var5"));
            
                // create target object
                com.amap.api.maps.model.VisibleRegion obj = new com.amap.api.maps.model.VisibleRegion(var1, var2, var3, var4, var5);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_LatLngCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_LatLngCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.LatLngCreator obj = new com.amap.api.maps.model.LatLngCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_CircleHoleOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_CircleHoleOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.CircleHoleOptions obj = new com.amap.api.maps.model.CircleHoleOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_LatLngBounds_Builder__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_LatLngBounds_Builder__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.LatLngBounds.Builder obj = new com.amap.api.maps.model.LatLngBounds.Builder();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_NavigateArrowOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_NavigateArrowOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.NavigateArrowOptions obj = new com.amap.api.maps.model.NavigateArrowOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_BitmapDescriptorFactory__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_BitmapDescriptorFactory__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.BitmapDescriptorFactory obj = new com.amap.api.maps.model.BitmapDescriptorFactory();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_MultiPointOverlayOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_MultiPointOverlayOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.MultiPointOverlayOptions obj = new com.amap.api.maps.model.MultiPointOverlayOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_PoiCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_PoiCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.PoiCreator obj = new com.amap.api.maps.model.PoiCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_PolylineOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_PolylineOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.PolylineOptions obj = new com.amap.api.maps.model.PolylineOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_Tile__int__int__byteArray", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_Tile__int__int__byteArray");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.maps.model.Tile obj = new com.amap.api.maps.model.Tile(var1, var2, var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_Gradient__intArray__floatArray", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_Gradient__intArray__floatArray");
                }
            
                // args
                // jsonable arg
                int[] var1 = (int[]) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                float[] var2 = (float[]) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.maps.model.Gradient obj = new com.amap.api.maps.model.Gradient(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_NaviPara__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_NaviPara__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.NaviPara obj = new com.amap.api.maps.model.NaviPara();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_GroundOverlayOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_GroundOverlayOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.GroundOverlayOptions obj = new com.amap.api.maps.model.GroundOverlayOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_GL3DModelOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_GL3DModelOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.GL3DModelOptions obj = new com.amap.api.maps.model.GL3DModelOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_MyTrafficStyle__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_MyTrafficStyle__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.MyTrafficStyle obj = new com.amap.api.maps.model.MyTrafficStyle();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_CameraPosition__com_amap_api_maps_model_LatLng__float__float__float", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_CameraPosition__com_amap_api_maps_model_LatLng__float__float__float");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) args).get("var4");
            
                // create target object
                com.amap.api.maps.model.CameraPosition obj = new com.amap.api.maps.model.CameraPosition(var1, new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue());
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_TextOptionsCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_TextOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.TextOptionsCreator obj = new com.amap.api.maps.model.TextOptionsCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_PoiPara__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_PoiPara__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.PoiPara obj = new com.amap.api.maps.model.PoiPara();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_MarkerOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_MarkerOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.MarkerOptions obj = new com.amap.api.maps.model.MarkerOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_animation_AnimationSet__boolean", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_animation_AnimationSet__boolean");
                }
            
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                // create target object
                com.amap.api.maps.model.animation.AnimationSet obj = new com.amap.api.maps.model.animation.AnimationSet(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_animation_RotateAnimation__float__float__float__float__float", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_animation_RotateAnimation__float__float__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                Double var5 = (Double) ((Map<String, Object>) args).get("var5");
            
                // create target object
                com.amap.api.maps.model.animation.RotateAnimation obj = new com.amap.api.maps.model.animation.RotateAnimation(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue(), new Double(var5).floatValue());
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_animation_RotateAnimation__float__float", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_animation_RotateAnimation__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.maps.model.animation.RotateAnimation obj = new com.amap.api.maps.model.animation.RotateAnimation(new Double(var1).floatValue(), new Double(var2).floatValue());
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_animation_TranslateAnimation__com_amap_api_maps_model_LatLng", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_animation_TranslateAnimation__com_amap_api_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.maps.model.animation.TranslateAnimation obj = new com.amap.api.maps.model.animation.TranslateAnimation(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_animation_EmergeAnimation__com_amap_api_maps_model_LatLng", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_animation_EmergeAnimation__com_amap_api_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.maps.model.animation.EmergeAnimation obj = new com.amap.api.maps.model.animation.EmergeAnimation(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_animation_AlphaAnimation__float__float", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_animation_AlphaAnimation__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.maps.model.animation.AlphaAnimation obj = new com.amap.api.maps.model.animation.AlphaAnimation(new Double(var1).floatValue(), new Double(var2).floatValue());
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_animation_ScaleAnimation__float__float__float__float", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_animation_ScaleAnimation__float__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) args).get("var4");
            
                // create target object
                com.amap.api.maps.model.animation.ScaleAnimation obj = new com.amap.api.maps.model.animation.ScaleAnimation(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue());
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_LatLngBounds__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_LatLngBounds__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.maps.model.LatLng var2 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.maps.model.LatLngBounds obj = new com.amap.api.maps.model.LatLngBounds(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_CustomMapStyleOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_CustomMapStyleOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.CustomMapStyleOptions obj = new com.amap.api.maps.model.CustomMapStyleOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_BuildingOverlayOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_BuildingOverlayOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.BuildingOverlayOptions obj = new com.amap.api.maps.model.BuildingOverlayOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_CrossOverlayOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_CrossOverlayOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.CrossOverlayOptions obj = new com.amap.api.maps.model.CrossOverlayOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_VisibleRegionCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_VisibleRegionCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.VisibleRegionCreator obj = new com.amap.api.maps.model.VisibleRegionCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_LatLng__double__double", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_LatLng__double__double");
                }
            
                // args
                // jsonable arg
                double var1 = (double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                double var3 = (double) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.maps.model.LatLng obj = new com.amap.api.maps.model.LatLng(var1, var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_LatLng__double__double__boolean", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_LatLng__double__double__boolean");
                }
            
                // args
                // jsonable arg
                double var1 = (double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                double var3 = (double) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                boolean var5 = (boolean) ((Map<String, Object>) args).get("var5");
            
                // create target object
                com.amap.api.maps.model.LatLng obj = new com.amap.api.maps.model.LatLng(var1, var3, var5);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_TileProjection__int__int__int__int__int__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_TileProjection__int__int__int__int__int__int");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) args).get("var6");
            
                // create target object
                com.amap.api.maps.model.TileProjection obj = new com.amap.api.maps.model.TileProjection(var1, var2, var3, var4, var5, var6);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_AMapPara__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_AMapPara__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.AMapPara obj = new com.amap.api.maps.model.AMapPara();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_CircleOptionsCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_CircleOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.CircleOptionsCreator obj = new com.amap.api.maps.model.CircleOptionsCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_AMapCameraInfo__float__float__float__float__float__float", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_AMapCameraInfo__float__float__float__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                Double var5 = (Double) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                Double var6 = (Double) ((Map<String, Object>) args).get("var6");
            
                // create target object
                com.amap.api.maps.model.AMapCameraInfo obj = new com.amap.api.maps.model.AMapCameraInfo(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue(), new Double(var5).floatValue(), new Double(var6).floatValue());
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_PolygonOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_PolygonOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.PolygonOptions obj = new com.amap.api.maps.model.PolygonOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_WeightedLatLng__com_amap_api_maps_model_LatLng__double", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_WeightedLatLng__com_amap_api_maps_model_LatLng__double");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                double var2 = (double) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.maps.model.WeightedLatLng obj = new com.amap.api.maps.model.WeightedLatLng(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_WeightedLatLng__com_amap_api_maps_model_LatLng", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_WeightedLatLng__com_amap_api_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.maps.model.WeightedLatLng obj = new com.amap.api.maps.model.WeightedLatLng(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_MyLocationStyleCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_MyLocationStyleCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.MyLocationStyleCreator obj = new com.amap.api.maps.model.MyLocationStyleCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_MarkerOptionsCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_MarkerOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.MarkerOptionsCreator obj = new com.amap.api.maps.model.MarkerOptionsCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_MultiPointItem__com_amap_api_maps_model_LatLng", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_MultiPointItem__com_amap_api_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.maps.model.MultiPointItem obj = new com.amap.api.maps.model.MultiPointItem(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_LatLngBoundsCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_LatLngBoundsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.LatLngBoundsCreator obj = new com.amap.api.maps.model.LatLngBoundsCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_ArcOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_ArcOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.ArcOptions obj = new com.amap.api.maps.model.ArcOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_BitmapDescriptorCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_BitmapDescriptorCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.BitmapDescriptorCreator obj = new com.amap.api.maps.model.BitmapDescriptorCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_CircleOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_CircleOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.CircleOptions obj = new com.amap.api.maps.model.CircleOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_NavigateArrowOptionsCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_NavigateArrowOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.NavigateArrowOptionsCreator obj = new com.amap.api.maps.model.NavigateArrowOptionsCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_RuntimeRemoteException__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_RuntimeRemoteException__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // create target object
                com.amap.api.maps.model.RuntimeRemoteException obj = new com.amap.api.maps.model.RuntimeRemoteException(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_HeatmapTileProvider_Builder__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_HeatmapTileProvider_Builder__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.HeatmapTileProvider.Builder obj = new com.amap.api.maps.model.HeatmapTileProvider.Builder();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_BaseOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_BaseOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.BaseOptions obj = new com.amap.api.maps.model.BaseOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_PolylineOptionsCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_PolylineOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.PolylineOptionsCreator obj = new com.amap.api.maps.model.PolylineOptionsCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_BaseOverlay__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_BaseOverlay__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.BaseOverlay obj = new com.amap.api.maps.model.BaseOverlay();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_TileOverlayOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_TileOverlayOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.TileOverlayOptions obj = new com.amap.api.maps.model.TileOverlayOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_RoutePara__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_RoutePara__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.RoutePara obj = new com.amap.api.maps.model.RoutePara();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_ArcOptionsCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_ArcOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.ArcOptionsCreator obj = new com.amap.api.maps.model.ArcOptionsCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_CameraPositionCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_CameraPositionCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.CameraPositionCreator obj = new com.amap.api.maps.model.CameraPositionCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_ParticleOverLifeModule__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_ParticleOverLifeModule__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.particle.ParticleOverLifeModule obj = new com.amap.api.maps.model.particle.ParticleOverLifeModule();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_ConstantRotationOverLife__float", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_ConstantRotationOverLife__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                // create target object
                com.amap.api.maps.model.particle.ConstantRotationOverLife obj = new com.amap.api.maps.model.particle.ConstantRotationOverLife(new Double(var1).floatValue());
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_SinglePointParticleShape__float__float__float__boolean", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_SinglePointParticleShape__float__float__float__boolean");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                boolean var4 = (boolean) ((Map<String, Object>) args).get("var4");
            
                // create target object
                com.amap.api.maps.model.particle.SinglePointParticleShape obj = new com.amap.api.maps.model.particle.SinglePointParticleShape(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), var4);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_SinglePointParticleShape__float__float__float", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_SinglePointParticleShape__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.maps.model.particle.SinglePointParticleShape obj = new com.amap.api.maps.model.particle.SinglePointParticleShape(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue());
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_RandomVelocityBetweenTwoConstants__float__float__float__float__float__float", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_RandomVelocityBetweenTwoConstants__float__float__float__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                Double var5 = (Double) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                Double var6 = (Double) ((Map<String, Object>) args).get("var6");
            
                // create target object
                com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants obj = new com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue(), new Double(var5).floatValue(), new Double(var6).floatValue());
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_CurveSizeOverLife__float__float__float", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_CurveSizeOverLife__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.maps.model.particle.CurveSizeOverLife obj = new com.amap.api.maps.model.particle.CurveSizeOverLife(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue());
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_ParticleEmissionModule__int__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_ParticleEmissionModule__int__int");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.maps.model.particle.ParticleEmissionModule obj = new com.amap.api.maps.model.particle.ParticleEmissionModule(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_RectParticleShape__float__float__float__float__boolean", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_RectParticleShape__float__float__float__float__boolean");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                boolean var5 = (boolean) ((Map<String, Object>) args).get("var5");
            
                // create target object
                com.amap.api.maps.model.particle.RectParticleShape obj = new com.amap.api.maps.model.particle.RectParticleShape(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue(), var5);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_RandomColorBetWeenTwoConstants__float__float__float__float__float__float__float__float", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_RandomColorBetWeenTwoConstants__float__float__float__float__float__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                Double var5 = (Double) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                Double var6 = (Double) ((Map<String, Object>) args).get("var6");
                // jsonable arg
                Double var7 = (Double) ((Map<String, Object>) args).get("var7");
                // jsonable arg
                Double var8 = (Double) ((Map<String, Object>) args).get("var8");
            
                // create target object
                com.amap.api.maps.model.particle.RandomColorBetWeenTwoConstants obj = new com.amap.api.maps.model.particle.RandomColorBetWeenTwoConstants(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue(), new Double(var5).floatValue(), new Double(var6).floatValue(), new Double(var7).floatValue(), new Double(var8).floatValue());
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_ParticleOverlayOptionsFactory__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_ParticleOverlayOptionsFactory__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.particle.ParticleOverlayOptionsFactory obj = new com.amap.api.maps.model.particle.ParticleOverlayOptionsFactory();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_ParticleOverlayOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_ParticleOverlayOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.particle.ParticleOverlayOptions obj = new com.amap.api.maps.model.particle.ParticleOverlayOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_TextOptions__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_TextOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.TextOptions obj = new com.amap.api.maps.model.TextOptions();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_PolygonOptionsCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_PolygonOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.PolygonOptionsCreator obj = new com.amap.api.maps.model.PolygonOptionsCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_TileProjectionCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_TileProjectionCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.TileProjectionCreator obj = new com.amap.api.maps.model.TileProjectionCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_GroundOverlayOptionsCreator__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_GroundOverlayOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.GroundOverlayOptionsCreator obj = new com.amap.api.maps.model.GroundOverlayOptionsCreator();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_IndoorBuildingInfo__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_IndoorBuildingInfo__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.IndoorBuildingInfo obj = new com.amap.api.maps.model.IndoorBuildingInfo();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_TextureMapView__android_content_Context", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_TextureMapView__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.maps.TextureMapView obj = new com.amap.api.maps.TextureMapView(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_TextureMapView__android_content_Context__com_amap_api_maps_AMapOptions", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_TextureMapView__android_content_Context__com_amap_api_maps_AMapOptions");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.maps.AMapOptions var2 = (com.amap.api.maps.AMapOptions) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.maps.TextureMapView obj = new com.amap.api.maps.TextureMapView(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_AMapUtils__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_AMapUtils__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.AMapUtils obj = new com.amap.api.maps.AMapUtils();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_WearMapView__android_content_Context", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_WearMapView__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.maps.WearMapView obj = new com.amap.api.maps.WearMapView(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_WearMapView__android_content_Context__com_amap_api_maps_AMapOptions", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_WearMapView__android_content_Context__com_amap_api_maps_AMapOptions");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.maps.AMapOptions var2 = (com.amap.api.maps.AMapOptions) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.maps.WearMapView obj = new com.amap.api.maps.WearMapView(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_MapView__android_content_Context", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_MapView__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.maps.MapView obj = new com.amap.api.maps.MapView(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_MapView__android_content_Context__com_amap_api_maps_AMapOptions", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_MapView__android_content_Context__com_amap_api_maps_AMapOptions");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.maps.AMapOptions var2 = (com.amap.api.maps.AMapOptions) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.maps.MapView obj = new com.amap.api.maps.MapView(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_trace_TraceLocation__double__double__float__float__long", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_trace_TraceLocation__double__double__float__float__long");
                }
            
                // args
                // jsonable arg
                double var1 = (double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                double var3 = (double) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                Double var5 = (Double) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                Double var6 = (Double) ((Map<String, Object>) args).get("var6");
                // jsonable arg
                long var7 = (long) (int) ((Map<String, Object>) args).get("var7");
            
                // create target object
                com.amap.api.trace.TraceLocation obj = new com.amap.api.trace.TraceLocation(var1, var3, new Double(var5).floatValue(), new Double(var6).floatValue(), var7);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_trace_TraceLocation__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_trace_TraceLocation__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.trace.TraceLocation obj = new com.amap.api.trace.TraceLocation();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_trace_LBSTraceClient__android_content_Context", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_trace_LBSTraceClient__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.trace.LBSTraceClient obj = new com.amap.api.trace.LBSTraceClient(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_trace_TraceOverlay__com_amap_api_maps_AMap__java_util_List_com_amap_api_maps_model_LatLng_", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_trace_TraceOverlay__com_amap_api_maps_AMap__java_util_List_com_amap_api_maps_model_LatLng_");
                }
            
                // args
                // ref arg
                com.amap.api.maps.AMap var1 = (com.amap.api.maps.AMap) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // list arg
                List<Integer> var2RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var2");
                java.util.List<com.amap.api.maps.model.LatLng> var2 = new ArrayList<>();
                for (int refId : var2RefIdList) {
                    ((ArrayList<com.amap.api.maps.model.LatLng>) var2).add((com.amap.api.maps.model.LatLng) getHEAP().get(refId));
                }
            
                // create target object
                com.amap.api.trace.TraceOverlay obj = new com.amap.api.trace.TraceOverlay(var1, (ArrayList) var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_trace_TraceOverlay__com_amap_api_maps_AMap", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_trace_TraceOverlay__com_amap_api_maps_AMap");
                }
            
                // args
                // ref arg
                com.amap.api.maps.AMap var1 = (com.amap.api.maps.AMap) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.trace.TraceOverlay obj = new com.amap.api.trace.TraceOverlay(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_maploader_ProcessingTile__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // create target object
                    com.autonavi.ae.gmap.maploader.ProcessingTile obj = new com.autonavi.ae.gmap.maploader.ProcessingTile(var1);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_glinterface_MapLabelItem__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.ae.gmap.glinterface.MapLabelItem obj = new com.autonavi.ae.gmap.glinterface.MapLabelItem();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_glanimation_AdglMapAnimationMgr__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr obj = new com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_glanimation_AdglAnimation2V__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // create target object
                    com.autonavi.ae.gmap.glanimation.AdglAnimation2V obj = new com.autonavi.ae.gmap.glanimation.AdglAnimation2V(var1);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_glanimation_AdglAnimationContantValues__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.ae.gmap.glanimation.AdglAnimationContantValues obj = new com.autonavi.ae.gmap.glanimation.AdglAnimationContantValues();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_glanimation_AdglMapAnimFling__int__int__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // create target object
                    com.autonavi.ae.gmap.glanimation.AdglMapAnimFling obj = new com.autonavi.ae.gmap.glanimation.AdglMapAnimFling(var1, var2, var3);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_glanimation_AdglAnimation1V__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // create target object
                    com.autonavi.ae.gmap.glanimation.AdglAnimation1V obj = new com.autonavi.ae.gmap.glanimation.AdglAnimation1V(var1);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_glanimation_AdglMapAnimPivotZoom__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // create target object
                    com.autonavi.ae.gmap.glanimation.AdglMapAnimPivotZoom obj = new com.autonavi.ae.gmap.glanimation.AdglMapAnimPivotZoom(var1);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_glanimation_AbstractAdglAnimationParam1V__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V obj = new com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_glanimation_AdglMapAnimGroup__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // create target object
                    com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup obj = new com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup(var1);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_glanimation_AbstractAdglAnimationParam2V__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V obj = new com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_style_StyleItem__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // create target object
                    com.autonavi.ae.gmap.style.StyleItem obj = new com.autonavi.ae.gmap.style.StyleItem(var1);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_style_StyleElement__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.ae.gmap.style.StyleElement obj = new com.autonavi.ae.gmap.style.StyleElement();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_GLMapEngine_MapViewInitParam__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam obj = new com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_gesture_EAMapPlatformGestureInfo__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo obj = new com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_GLMapState__int__long", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    long var2 = (long) (int) ((Map<String, Object>) args).get("var2");
            
                    // create target object
                    com.autonavi.ae.gmap.GLMapState obj = new com.autonavi.ae.gmap.GLMapState(var1, var2);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_GLMapState__long__long", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    long var1 = (long) (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    long var3 = (long) (int) ((Map<String, Object>) args).get("var3");
            
                    // create target object
                    com.autonavi.ae.gmap.GLMapState obj = new com.autonavi.ae.gmap.GLMapState(var1, var3);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_gloverlay_GLTextureProperty__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.ae.gmap.gloverlay.GLTextureProperty obj = new com.autonavi.ae.gmap.gloverlay.GLTextureProperty();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_gloverlay_GLOverlayBundle_GLAmapFocusHits__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits obj = new com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_gloverlay_GLCrossVector_AVectorCrossAttr__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr obj = new com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_gloverlay_GLRouteProperty__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.ae.gmap.gloverlay.GLRouteProperty obj = new com.autonavi.ae.gmap.gloverlay.GLRouteProperty();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_gloverlay_GLOverlayTexture__int__int__int__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
            
                    // create target object
                    com.autonavi.ae.gmap.gloverlay.GLOverlayTexture obj = new com.autonavi.ae.gmap.gloverlay.GLOverlayTexture(var1, var2, var3, var4);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_gloverlay_GLOverlayTexture__int__int__float__float__int__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    Double var3 = (Double) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    Double var4 = (Double) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
            
                    // create target object
                    com.autonavi.ae.gmap.gloverlay.GLOverlayTexture obj = new com.autonavi.ae.gmap.gloverlay.GLOverlayTexture(var1, var2, new Double(var3).floatValue(), new Double(var4).floatValue(), var5, var6);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_ae_gmap_GLMapEngine_InitParam__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.ae.gmap.GLMapEngine.InitParam obj = new com.autonavi.ae.gmap.GLMapEngine.InitParam();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_maploader_AMapLoader_ADataRequestParam__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam obj = new com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_maploader_NetworkState__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.maploader.NetworkState obj = new com.autonavi.amap.mapcore.maploader.NetworkState();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_maploader_AMapLoader_AMapGridDownloadRequest__android_content_Context__String__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                    // create target object
                    com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest obj = new com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest(var1, var2, var3);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_maploader_AMapLoader__int__com_autonavi_ae_gmap_GLMapEngine__com_autonavi_amap_mapcore_maploader_AMapLoader_ADataRequestParam", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    com.autonavi.ae.gmap.GLMapEngine var2 = (com.autonavi.ae.gmap.GLMapEngine) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
                    // ref arg
                    com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam var3 = (com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam) getHEAP().get((int) ((Map<String, Object>) args).get("var3"));
            
                    // create target object
                    com.autonavi.amap.mapcore.maploader.AMapLoader obj = new com.autonavi.amap.mapcore.maploader.AMapLoader(var1, var2, var3);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_MapProjection__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.MapProjection obj = new com.autonavi.amap.mapcore.MapProjection();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_tools_TextTextureGenerator__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.tools.TextTextureGenerator obj = new com.autonavi.amap.mapcore.tools.TextTextureGenerator();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_tools_GLFileUtil__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.tools.GLFileUtil obj = new com.autonavi.amap.mapcore.tools.GLFileUtil();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_tools_GlMapUtil__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.tools.GlMapUtil obj = new com.autonavi.amap.mapcore.tools.GlMapUtil();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_tools_GLMapStaticValue__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.tools.GLMapStaticValue obj = new com.autonavi.amap.mapcore.tools.GLMapStaticValue();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_tools_GLConvertUtil__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.tools.GLConvertUtil obj = new com.autonavi.amap.mapcore.tools.GLConvertUtil();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_MsgProcessor__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.MsgProcessor obj = new com.autonavi.amap.mapcore.MsgProcessor();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_AeUtil_UnZipFileBrake__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.AeUtil.UnZipFileBrake obj = new com.autonavi.amap.mapcore.AeUtil.UnZipFileBrake();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_AbstractNativeInstance__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.AbstractNativeInstance obj = new com.autonavi.amap.mapcore.AbstractNativeInstance();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_LinkInfo__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.LinkInfo obj = new com.autonavi.amap.mapcore.LinkInfo();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_AMapNativePolyline__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.AMapNativePolyline obj = new com.autonavi.amap.mapcore.AMapNativePolyline();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_IPoint__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.IPoint obj = new com.autonavi.amap.mapcore.IPoint();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_IPoint__int__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                    // create target object
                    com.autonavi.amap.mapcore.IPoint obj = new com.autonavi.amap.mapcore.IPoint(var1, var2);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_gles_AMapNativeGLShaderManager__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.gles.AMapNativeGLShaderManager obj = new com.autonavi.amap.mapcore.gles.AMapNativeGLShaderManager();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_DPoint__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.DPoint obj = new com.autonavi.amap.mapcore.DPoint();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_DPoint__double__double", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    double var1 = (double) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    double var3 = (double) ((Map<String, Object>) args).get("var3");
            
                    // create target object
                    com.autonavi.amap.mapcore.DPoint obj = new com.autonavi.amap.mapcore.DPoint(var1, var3);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_AMapNativeRenderer__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.AMapNativeRenderer obj = new com.autonavi.amap.mapcore.AMapNativeRenderer();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_FileUtil__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.FileUtil obj = new com.autonavi.amap.mapcore.FileUtil();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_animation_GLTranslateAnimation__com_amap_api_maps_model_LatLng", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // create target object
                    com.autonavi.amap.mapcore.animation.GLTranslateAnimation obj = new com.autonavi.amap.mapcore.animation.GLTranslateAnimation(var1);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_animation_GLRotateAnimation__float__float__float__float__float", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    Double var3 = (Double) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    Double var4 = (Double) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    Double var5 = (Double) ((Map<String, Object>) args).get("var5");
            
                    // create target object
                    com.autonavi.amap.mapcore.animation.GLRotateAnimation obj = new com.autonavi.amap.mapcore.animation.GLRotateAnimation(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue(), new Double(var5).floatValue());
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_animation_GLAlphaAnimation__float__float", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
            
                    // create target object
                    com.autonavi.amap.mapcore.animation.GLAlphaAnimation obj = new com.autonavi.amap.mapcore.animation.GLAlphaAnimation(new Double(var1).floatValue(), new Double(var2).floatValue());
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_animation_GLScaleAnimation__float__float__float__float", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    Double var3 = (Double) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    Double var4 = (Double) ((Map<String, Object>) args).get("var4");
            
                    // create target object
                    com.autonavi.amap.mapcore.animation.GLScaleAnimation obj = new com.autonavi.amap.mapcore.animation.GLScaleAnimation(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue());
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_animation_GLTransformation__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.animation.GLTransformation obj = new com.autonavi.amap.mapcore.animation.GLTransformation();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_animation_GLAnimationSet__boolean", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // create target object
                    com.autonavi.amap.mapcore.animation.GLAnimationSet obj = new com.autonavi.amap.mapcore.animation.GLAnimationSet(var1);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_animation_GLEmergeAnimation__com_amap_api_maps_model_LatLng", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // create target object
                    com.autonavi.amap.mapcore.animation.GLEmergeAnimation obj = new com.autonavi.amap.mapcore.animation.GLEmergeAnimation(var1);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_animation_GLAnimation__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.animation.GLAnimation obj = new com.autonavi.amap.mapcore.animation.GLAnimation();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_MapConfig__boolean", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // create target object
                    com.autonavi.amap.mapcore.MapConfig obj = new com.autonavi.amap.mapcore.MapConfig(var1);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_message_HoverGestureMapMessage__int__float", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
            
                    // create target object
                    com.autonavi.amap.mapcore.message.HoverGestureMapMessage obj = new com.autonavi.amap.mapcore.message.HoverGestureMapMessage(var1, new Double(var2).floatValue());
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_message_MoveGestureMapMessage__int__float__float", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    Double var3 = (Double) ((Map<String, Object>) args).get("var3");
            
                    // create target object
                    com.autonavi.amap.mapcore.message.MoveGestureMapMessage obj = new com.autonavi.amap.mapcore.message.MoveGestureMapMessage(var1, new Double(var2).floatValue(), new Double(var3).floatValue());
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_message_ScaleGestureMapMessage__int__float__int__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
            
                    // create target object
                    com.autonavi.amap.mapcore.message.ScaleGestureMapMessage obj = new com.autonavi.amap.mapcore.message.ScaleGestureMapMessage(var1, new Double(var2).floatValue(), var3, var4);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_message_RotateGestureMapMessage__int__float__int__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
            
                    // create target object
                    com.autonavi.amap.mapcore.message.RotateGestureMapMessage obj = new com.autonavi.amap.mapcore.message.RotateGestureMapMessage(var1, new Double(var2).floatValue(), var3, var4);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_FPointBounds__com_autonavi_amap_mapcore_FPoint__com_autonavi_amap_mapcore_FPoint", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.autonavi.amap.mapcore.FPoint var1 = (com.autonavi.amap.mapcore.FPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // ref arg
                    com.autonavi.amap.mapcore.FPoint var2 = (com.autonavi.amap.mapcore.FPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                    // create target object
                    com.autonavi.amap.mapcore.FPointBounds obj = new com.autonavi.amap.mapcore.FPointBounds(var1, var2);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_CoordUtil__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.CoordUtil obj = new com.autonavi.amap.mapcore.CoordUtil();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_AeUtil__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.AeUtil obj = new com.autonavi.amap.mapcore.AeUtil();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_VirtualEarthProjection__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.VirtualEarthProjection obj = new com.autonavi.amap.mapcore.VirtualEarthProjection();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_Rectangle__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.Rectangle obj = new com.autonavi.amap.mapcore.Rectangle();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_Rectangle__float__float__float__float", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    Double var3 = (Double) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    Double var4 = (Double) ((Map<String, Object>) args).get("var4");
            
                    // create target object
                    com.autonavi.amap.mapcore.Rectangle obj = new com.autonavi.amap.mapcore.Rectangle(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue());
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_Inner_3dMap_location__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // create target object
                    com.autonavi.amap.mapcore.Inner_3dMap_location obj = new com.autonavi.amap.mapcore.Inner_3dMap_location(var1);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_Inner_3dMap_location__android_location_Location", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.location.Location var1 = (android.location.Location) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // create target object
                    com.autonavi.amap.mapcore.Inner_3dMap_location obj = new com.autonavi.amap.mapcore.Inner_3dMap_location(var1);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_AMapEngineUtils__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.AMapEngineUtils obj = new com.autonavi.amap.mapcore.AMapEngineUtils();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_FPoint3__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.FPoint3 obj = new com.autonavi.amap.mapcore.FPoint3();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_FPoint3__float__float__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // create target object
                    com.autonavi.amap.mapcore.FPoint3 obj = new com.autonavi.amap.mapcore.FPoint3(new Double(var1).floatValue(), new Double(var2).floatValue(), var3);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_AMapEtaDecoder__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.AMapEtaDecoder obj = new com.autonavi.amap.mapcore.AMapEtaDecoder();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_FPointBounds_Builder__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.FPointBounds.Builder obj = new com.autonavi.amap.mapcore.FPointBounds.Builder();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_Inner_3dMap_locationOption__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.Inner_3dMap_locationOption obj = new com.autonavi.amap.mapcore.Inner_3dMap_locationOption();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_FPoint__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.autonavi.amap.mapcore.FPoint obj = new com.autonavi.amap.mapcore.FPoint();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_autonavi_amap_mapcore_FPoint__float__float", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
            
                    // create target object
                    com.autonavi.amap.mapcore.FPoint obj = new com.autonavi.amap.mapcore.FPoint(new Double(var1).floatValue(), new Double(var2).floatValue());
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
        }};
    }
}
